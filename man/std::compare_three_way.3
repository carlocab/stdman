.TH std::compare_three_way 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::compare_three_way \- std::compare_three_way

.SH Synopsis
   Defined in header <compare>
   Defined in header <functional>
   struct compare_three_way;       \fI(since C++20)\fP

   Function object for performing comparisons. Deduces the parameter types and the
   return type of the function call operator.

.SH Member types

   Member type    Definition
   is_transparent /* unspecified */

.SH Member functions

   operator() obtains the result of three-way comparison on both arguments
              \fI(public member function)\fP

std::compare_three_way::operator()

   template<class T, class U>

       requires std::three_way_comparable_with<T, U> ||
                /* std::declval<T>() <=> std::declval<U>() resolves to
                   a built-in operator comparing pointers */

   constexpr auto operator()(T&& t, U&& u) const;

   Compares t and u, equivalent to return std::forward<T>(t) <=> std::forward<U>(u);,
   except when that expression resolves to a call to a builtin operator<=> comparing
   pointers.

   When a call would invoke a built-in operator comparing pointers of type P, the
   result is instead determined as follows:

     * Returns std::strong_ordering::less if the (possibly converted) value of the
       first argument precedes the (possibly converted) value of the second argument in
       the implementation-defined strict total ordering over all pointer values of type
       P. This strict total ordering is consistent with the partial order imposed by
       the builtin operators <, >, <=, and >=.
     * Otherwise, returns std::strong_ordering::greater if (possibly converted) value
       of the second argument precedes the (possibly converted) value of the first
       argument in the same strict total ordering.
     * Otherwise, returns std::strong_ordering::equal.

   The behavior is undefined unless the the conversion sequences from both T and U to P
   are equality-preserving (see below).

   Equality preservation

   An expression is equality preserving if it results in equal outputs given equal
   inputs.

     * The inputs to an expression consist of its operands.
     * The outputs of an expression consist of its result and all operands modified by
       the expression (if any).

   In specification of standard concepts, operands are defined as the largest
   subexpressions that include only:

     * an id-expression, and
     * invocations of std::move, std::forward, and std::declval.

   The cv-qualification and value category of each operand is determined by assuming
   that each template type parameter denotes a cv-unqualified complete non-array object
   type.

   Every expression required to be equality preserving is further required to be
   stable: two evaluations of such an expression with the same input objects must have
   equal outputs absent any explicit intervening modification of those input objects.

.SH Example


// Run this code

 #include <iostream>
 #include <compare>

 struct Rational_2 {
     int num;
     int den; // > 0
 };

 constexpr std::weak_ordering operator<=>(Rational_2 lhs, Rational_2 rhs)
 {
     return lhs.num * rhs.den <=> rhs.num * lhs.den;
 }

 void print(std::weak_ordering value)
 {
     if (value == 0)
         std::cout << "equal\\n";
     else if (value < 0)
         std::cout << "less\\n";
     else
         std::cout << "greater\\n";
 }

 int main()
 {
     Rational_2 c{6,5};
     Rational_2 d{8,7};
     print(c <=> d);
     print(std::compare_three_way{}(c,d));
 }

.SH Output:

 greater
 greater

.SH See also

   ranges::equal_to      function object implementing x == y
   (C++20)               \fI(class)\fP
   ranges::not_equal_to  function object implementing x != y
   (C++20)               \fI(class)\fP
   ranges::less          function object implementing x < y
   (C++20)               \fI(class)\fP
   ranges::greater       function object implementing x > y
   (C++20)               \fI(class)\fP
   ranges::less_equal    function object implementing x <= y
   (C++20)               \fI(class)\fP
   ranges::greater_equal function object implementing x >= y
   (C++20)               \fI(class)\fP
