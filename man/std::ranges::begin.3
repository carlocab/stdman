.TH std::ranges::begin 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::begin \- std::ranges::begin

.SH Synopsis
   Defined in header <ranges>
   inline namespace /*unspecified*/ {

       inline constexpr /*unspecified*/ begin =            \fI(since C++20)\fP
   /*unspecified*/;                                        (customization point object)

   }
   Call signature
   template< class T >

       requires /* see below */

   constexpr std::input_or_output_iterator auto begin(T&&
   t);

   Returns an iterator to the first element of the argument.

   range-begin-end.svg

   Let t be an object of type T. If the argument is an lvalue or
   ranges::enable_borrowed_range<std::remove_cv_t<T>> is true, then a call to
   ranges::begin is expression-equivalent to:

    1. t + 0 if T is an array type.

       If std::remove_all_extents_t<T> is incomplete, then
       ranges::begin(std::forward<T>(t)) is ill-formed, no diagnostic required.
    2. Otherwise, std::forward<T>(t).begin(), if that expression is valid, and its
       return type models std::input_or_output_iterator.
    3. Otherwise, begin(std::forward<T>(t)), if T is a class or enumeration type, the
       aforementioned unqualified call is valid, its return type models
       std::input_or_output_iterator, where the overload resolution is performed with
       the following candidates:

          * void begin(auto&) = delete;
          * void begin(const auto&) = delete;
          * any declarations of begin found by argument-dependent lookup.

   In all other cases, a call to ranges::begin is ill-formed, which can result in
   substitution failure when ranges::begin(t) appears in the immediate context of a
   template instantiation.

.SH Notes

   If the argument is an rvalue (i.e. T is an object type) and
   ranges::enable_borrowed_range<std::remove_cv_t<T>> is false, the call to
   ranges::begin is ill-formed, which also results in substitution failure.

   The return type models std::input_or_output_iterator in all cases.

.SH Example


// Run this code

 #include <iostream>
 #include <vector>
 #include <ranges>

 int main()
 {
     std::vector<int> v = { 3, 1, 4 };
     auto vi = std::ranges::begin(v);
     std::cout << *vi << '\\n';
     *vi = 42; // OK

     int a[] = { -5, 10, 15 };
     auto ai = std::ranges::begin(a);
     std::cout << *ai << '\\n';
     *ai = 42; // OK
 }

.SH Output:

 3
 -5

.SH See also

   ranges::cbegin returns an iterator to the beginning of a read-only range
   (C++20)        (customization point object)
   begin
   cbegin         returns an iterator to the beginning of a container or array
   \fI(C++11)\fP        \fI(function template)\fP
   \fI(C++14)\fP
