.TH std::mergeable 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::mergeable \- std::mergeable

.SH Synopsis
   Defined in header <iterator>
   template< class I1, class I2, class Out, class R = ranges::less,

             class P1 = std::identity, class P2 = std::identity >
   concept mergeable =
       std::input_iterator<I1> &&
       std::input_iterator<I2> &&
       std::weakly_incrementable<Out> &&                             \fI(since C++20)\fP
       std::indirectly_copyable<I1, Out> &&
       std::indirectly_copyable<I2, Out> &&
       std::indirect_strict_weak_order<R,
                                       std::projected<I1, P1>,

                                       std::projected<I2, P2>>;

   The mergeable concept specifies the requirements for algorithms that merge two input
   ranges into a single output range according to the strict weak ordering imposed by
   R.

   Semantic requirements

   mergeable is only if all concepts it subsumes are modeled.

.SH See also

   ranges::merge                    merges two sorted ranges
   (C++20)                          (niebloid)
   ranges::set_union                computes the union of two sets
   (C++20)                          (niebloid)
   ranges::set_intersection         computes the intersection of two sets
   (C++20)                          (niebloid)
   ranges::set_difference           computes the difference between two sets
   (C++20)                          (niebloid)
   ranges::set_symmetric_difference computes the symmetric difference between two sets
   (C++20)                          (niebloid)
