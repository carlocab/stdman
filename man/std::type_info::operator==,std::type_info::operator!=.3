.TH std::type_info::operator==,std::type_info::operator!= 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::type_info::operator==,std::type_info::operator!= \- std::type_info::operator==,std::type_info::operator!=

.SH Synopsis
   bool operator==( const type_info& rhs ) const;           \fI(until C++11)\fP
   bool operator==( const type_info& rhs ) const noexcept;  \fI(since C++11)\fP
   bool operator!=( const type_info& rhs ) const;           \fI(until C++11)\fP
   bool operator!=( const type_info& rhs ) const noexcept;  \fI(since C++11)\fP
                                                            \fI(until C++20)\fP

   Checks if the objects refer to the same types.

.SH Parameters

   rhs - another type information object to compare to

.SH Return value

   true if the comparison operation holds true, false otherwise

.SH Example


// Run this code

 #include <iostream>
 #include <typeinfo>
 #include <string>
 #include <utility>

 class person
 {
   public:

    person(std::string&& n) : _name(n) {}
    virtual const std::string& name() const{ return _name; }

   private:

     std::string _name;
 };

 class employee : public person
 {
    public:

      employee(std::string&& n, std::string&& p) :
          person(std::move(n)), _profession(std::move(p)) {}

      const std::string& profession() const { return _profession; }

    private:

      std::string _profession;
 };

 void somefunc(const person& p)
 {
    if(typeid(employee) == typeid(p))
    {
       std::cout << p.name() << " is an employee ";
       auto& emp = dynamic_cast<const employee&>(p);
       std::cout << "who works in " << emp.profession() << '\\n';
    }
 }

 int main()
 {
    employee paul("Paul","Economics");
    somefunc(paul);
 }

.SH Output:

 Paul is an employee who works in Economics

.SH See also

          checks whether the referred type precedes referred type of another type_info
   before object in the implementation defined order, i.e. orders the referred types
          \fI(public member function)\fP
