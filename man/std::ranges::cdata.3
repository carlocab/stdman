.TH std::ranges::cdata 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::cdata \- std::ranges::cdata

.SH Synopsis
   Defined in header <ranges>
   inline namespace /*unspecified*/ {
                                                                         \fI(since C++20)\fP
       inline constexpr /*unspecified*/ cdata = /*unspecified*/;         (customization
                                                                         point object)
   }
   Call signature
   template< class T >

       requires /* see below */

   constexpr
   std::remove_reference_t<ranges::range_reference_t</*CT*/>>*
   cdata(T&& t);

   Returns a pointer to the first element of a contiguous range denoted by a
   const-qualified argument.

   Let CT be

    1. const std::remove_reference_t<T>& if the argument is an lvalue (i.e. T is an
       lvalue reference type),
    2. const T otherwise,

   a call to ranges::cdata is expression-equivalent to
   ranges::data(static_cast<CT&&>(t)).

   If ranges::cdata(t) is valid, then it returns a pointer to a object.

.SH Example


// Run this code

 #include <cstring>
 #include <iostream>
 #include <ranges>
 #include <string>

 int main()
 {
     std::string src {"Hello world!\\n"};

     char dst[20]; // storage for a C-style string
     std::strcpy(dst, std::ranges::cdata(src));
     // [data(src), data(src) + size(src)] is guaranteed to be an NTBS

     std::cout << dst;
 }

.SH Output:

 Hello world!

.SH See also

   ranges::data obtains a pointer to the beginning of a contiguous range
   (C++20)      (customization point object)
   data         obtains the pointer to the underlying array
   \fI(C++17)\fP      \fI(function template)\fP
