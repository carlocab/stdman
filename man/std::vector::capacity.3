.TH std::vector::capacity 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vector::capacity \- std::vector::capacity

.SH Synopsis
   size_type capacity() const;                     \fI(until C++11)\fP
   size_type capacity() const noexcept;            \fI(since C++11)\fP
                                                   \fI(until C++20)\fP
   constexpr size_type capacity() const noexcept;  \fI(since C++20)\fP

   Returns the number of elements that the container has currently allocated space for.

.SH Parameters

   \fI(none)\fP

.SH Return value

   Capacity of the currently allocated storage.

.SH Complexity

   Constant.

.SH Example


// Run this code

 #include <iostream>
 #include <vector>

 int main()
 {
     int sz = 200;
     std::vector<int> v1;

     auto cap = v1.capacity();
     std::cout << "initial capacity=" << cap << '\\n';

     for (int n = 0; n < sz; ++n) {
         v1.push_back(n);
         if (cap != v1.capacity()) {
             cap = v1.capacity();
             std::cout << "new capacity=" << cap << '\\n';
         }
     }

     std::cout << "final size=" << v1.size() << '\\n';
     std::cout << "final capacity=" << v1.capacity() << '\\n';
 }

.SH Possible output:

 initial capacity=0
 new capacity=1
 new capacity=2
 new capacity=4
 new capacity=8
 new capacity=16
 new capacity=32
 new capacity=64
 new capacity=128
 new capacity=256
 final size=200
 final capacity=256

.SH See also

   size    returns the number of elements
           \fI(public member function)\fP
   reserve reserves storage
           \fI(public member function)\fP
