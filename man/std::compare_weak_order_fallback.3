.TH std::compare_weak_order_fallback 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::compare_weak_order_fallback \- std::compare_weak_order_fallback

.SH Synopsis
   Defined in header <compare>
   inline namespace /* unspecified */ {

       inline constexpr /* unspecified */                                 \fI(since C++20)\fP
           compare_weak_order_fallback = /* unspecified */;

   }
   Call signature
   template< class T, class U >

       requires /* see below */
   constexpr std::weak_ordering

       compare_weak_order_fallback(T&& t, U&& u) noexcept(/* see below
   */);

   Performs three-way comparison on t an u and produces a result of type
   std::weak_ordering, even if the operator <=> is unavailable.

   Let t and u be expressions and T and U denote decltype((t)) and decltype((u))
   respectively, std::compare_weak_order_fallback(t, u) is expression-equivalent to:

     * If std::is_same_v<std::decay_t<T>, std::decay_t<U>> == true:

          * the expression is expression-equivalent to std::weak_order(t, u), if it is
            a well-formed expression;
          * Otherwise, if t == u and t < u are both well-formed and convertible to
            bool, the expression is expression-equivalent to

 t == u ? std::weak_ordering::equal :
 t < u  ? std::weak_ordering::less :
          std::weak_ordering::greater

   except that t and u are evaluated only once.

     * In all other cases, std::compare_weak_order_fallback(t, u) is ill-formed.

.SH Example


// Run this code

 #include <iostream>
 #include <compare>

 // does not support <=>
 struct Rational_1 {
     int num;
     int den; // > 0
 };

 inline constexpr bool operator<(Rational_1 lhs, Rational_1 rhs)
 {
     return lhs.num * rhs.den < rhs.num * lhs.den;
 }

 inline constexpr bool operator==(Rational_1 lhs, Rational_1 rhs)
 {
     return lhs.num * rhs.den == rhs.num * lhs.den;
 }

 // supports <=>
 struct Rational_2 {
     int num;
     int den; // > 0
 };

 inline constexpr std::weak_ordering operator<=>(Rational_2 lhs, Rational_2 rhs)
 {
     return lhs.num * rhs.den <=> rhs.num * lhs.den;
 }

 void print(std::weak_ordering value)
 {
     if (value == 0)
         std::cout << "equal\\n";
     else if (value < 0)
         std::cout << "less\\n";
     else
         std::cout << "greater\\n";
 }

 int main()
 {
     Rational_1 a{1, 2};
     Rational_1 b{3, 4};
 //  print(a <=> b);                // doesn't work
     print(std::compare_weak_order_fallback(a, b)); // works, defaults to < and ==

     Rational_2 c{6, 5};
     Rational_2 d{8, 7};
     print(c <=> d);                // works
     print(std::compare_weak_order_fallback(c, d)); // works
 }

.SH Output:

 less
 greater
 greater

.SH See also

   weak_order performs 3-way comparison and produces a result of type
   (C++20)    std::weak_ordering
              (customization point object)
