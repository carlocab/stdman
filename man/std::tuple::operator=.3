.TH std::tuple::operator= 3 "2020.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::tuple::operator= \- std::tuple::operator=

.SH Synopsis
                                        (since
   tuple& operator=( const              C++11)
   tuple& other );                      (until
                                        C++20)
   constexpr tuple& operator=(          (since
   const tuple& other );                C++20)
   tuple& operator=( tuple&&                    (since
   other ) noexcept(/* see                      C++11)
   below */);                                   (until
                                                C++20)
   constexpr tuple& operator=(                  (since
   tuple&& other ) noexcept(/*                  C++20)
   see below */);
   template< class... UTypes >                          (since
   tuple& operator=( const                              C++11)
   tuple<UTypes...>& other );                           (until
                                                        C++20)
   template< class... UTypes >
   constexpr tuple& operator=(                          (since
   const tuple<UTypes...>&                              C++20)
   other );
   template< class... UTypes >  \fB(1)\fP                             (since
   tuple& operator=(                                            C++11)
   tuple<UTypes...>&& other );                                  (until
                                    \fB(2)\fP                         C++20)
   template< class... UTypes >                                  (since
   constexpr tuple& operator=(                                  C++20)
   tuple<UTypes...>&& other );
   template< class U1, class U2         \fB(3)\fP                             (since
   >                                                                    C++11)
   tuple& operator=( const                                              (until
   pair<U1,U2>& p );                                                    C++20)
   template< class U1, class U2                 \fB(4)\fP
   >                                                                    (since
   constexpr tuple& operator=(                                          C++20)
   const pair<U1,U2>& p );                              \fB(5)\fP
   template< class U1, class U2                                                 (since
   >                                                                            C++11)
   tuple& operator=(                                                            (until
   pair<U1,U2>&& p );                                           \fB(6)\fP             C++20)
   template< class U1, class U2
   >                                                                            (since
   constexpr tuple& operator=(                                                  C++20)
   pair<U1,U2>&& p );

   Replaces the contents of the tuple with the contents of another tuple or a pair.

   1) Copy assignment operator. Assigns each element of other to the corresponding
   element of *this.

   2) Move assignment operator. For all i, assigns std::forward<Ti>(get<i>(other)) to
   get<i>(*this).

   3) For all i, assigns std::get<i>(other) to std::get<i>(*this).

   4) For all i, assigns std::forward<Ui>(std::get<i>(other)) to std::get<i>(*this).

   5) Assigns p.first to the first element of *this and p.second to the second element
   of *this.

   6) Assigns std::forward<U1>(p.first) to the first element of *this and
   std::forward<U2>(p.second) to the second element of *this.

   The behavior of these functions is undefined unless:

     * For \fB(1)\fP, std::is_copy_assignable<T_i>::value is true for all T_i
       in Types.
     * For \fB(2)\fP, std::is_move_assignable<T_i>::value is true for all T_i
       in Types.
     * For \fB(3)\fP, sizeof...(UTypes) == sizeof...(Types) and
       std::is_assignable<T_i&, const U_i&>::value is true for all
       corresponding pairs of types T_i in Types and U_i in UTypes.       \fI(until C++17)\fP
     * For \fB(4)\fP, sizeof...(UTypes) == sizeof...(Types) and
       std::is_assignable<T_i&, U_i&&>::value is true for all
       corresponding pairs of types T_i in Types and U_i in UTypes.
     * For \fB(5)\fP, sizeof...(Types) == 2 and std::is_assignable<T_0&, const
       U1&>::value and std::is_assignable<T_1&, const U2&>::value are
       both true, where T_0 and T_1 are the two types constituting Types.
     * For \fB(6)\fP, sizeof...(Types) == 2 and std::is_assignable<T_0&,
       U1&&>::value and std::is_assignable<T_1&, U2&&>::value are both
       true, where T_0 and T_1 are the two types constituting Types.
   These functions do not participate in overload resolution (or, for the
   copy assignment operator, is defined as deleted) if any required
   assignment operation is invalid or if there is a size mismatch.
   Specifically:

     * \fB(1)\fP is defined as deleted unless
       std::is_copy_assignable<T_i>::value is true for all T_i in Types.
     * \fB(2)\fP does not participate in overload resolution unless
       std::is_move_assignable<T_i>::value is true for all T_i in Types.
     * \fB(3)\fP does not participate in overload resolution unless
       sizeof...(UTypes) == sizeof...(Types) and std::is_assignable<T_i&,
       const U_i&>::value is true for all corresponding pairs of types
       T_i in Types and U_i in UTypes.                                    \fI(since C++17)\fP
     * \fB(4)\fP does not participate in overload resolution unless
       sizeof...(UTypes) == sizeof...(Types) and std::is_assignable<T_i&,
       U_i&&>::value is true for all corresponding pairs of types T_i in
       Types and U_i in UTypes.
     * \fB(5)\fP does not participate in overload resolution unless
       sizeof...(Types) == 2, std::is_assignable<T_0&, const U1&>::value
       and std::is_assignable<T_1&, const U2&>::value are both true,
       where T_0 and T_1 are the two types constituting Types.
     * \fB(6)\fP does not participate in overload resolution unless
       std::is_assignable<T_0&, U1&&>::value and std::is_assignable<T_1&,
       U2&&>::value are both true, where T_0 and T_1 are the two types
       constituting Types.

.SH Parameters

   other - tuple to replace the contents of this tuple
   p     - pair to replace the contents of this 2-tuple

.SH Return value

   *this

.SH Exceptions

   1) \fI(none)\fP

   2)
   noexcept specification:  
   noexcept(

       is_nothrow_move_assignable<T0>::value &&
       is_nothrow_move_assignable<T1>::value &&
       is_nothrow_move_assignable<T2>::value &&
       ...

   )

   3-6) \fI(none)\fP

.SH Example

    This section is incomplete
    Reason: no example

.SH See also


.SH Categories:

     * conditionally noexcept
     * Todo no example
