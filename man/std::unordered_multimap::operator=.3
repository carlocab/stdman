.TH std::unordered_multimap::operator= 3 "2022.03.29" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_multimap::operator= \- std::unordered_multimap::operator=

.SH Synopsis
   unordered_multimap& operator=( const                 \fB(1)\fP \fI(since C++11)\fP
   unordered_multimap& other );
   unordered_multimap& operator=( unordered_multimap&&                    \fI(since C++11)\fP
   other );                                                               \fI(until C++17)\fP
   unordered_multimap& operator=( unordered_multimap&&  \fB(2)\fP               \fI(since C++17)\fP
   other ) noexcept(/* see below */);
   unordered_multimap& operator=(                           \fB(3)\fP           \fI(since C++11)\fP
   std::initializer_list<value_type> ilist );

   Replaces the contents of the container.

   1) Copy assignment operator. Replaces the contents with a copy of the contents of
   other.
   If
   std::allocator_traits<allocator_type>::propagate_on_container_copy_assignment::value
   is true, the allocator of *this is replaced by a copy of that of other. If the
   allocator of *this after assignment would compare unequal to its old value, the old
   allocator is used to deallocate the memory, then the new allocator is used to
   allocate it before copying the elements. Otherwise, the memory owned by *this may be
   reused when possible. In any case, the elements originally belong to *this may be
   either destroyed or replaced by element-wise copy-assignment.
   2) Move assignment operator. Replaces the contents with those of other using move
   semantics (i.e. the data in other is moved from other into this container). other is
   in a valid but unspecified state afterwards.
   If
   std::allocator_traits<allocator_type>::propagate_on_container_move_assignment::value
   is true, the allocator of *this is replaced by a copy of that of other. If it is
   false and the allocators of *this and other do not compare equal, *this cannot take
   ownership of the memory owned by other and must move-assign each element
   individually, allocating additional memory using its own allocator as needed. In any
   case, all elements originally belong to *this are either destroyed or replaced by
   element-wise move-assignment.
   3) Replaces the contents with those identified by initializer list ilist.

.SH Parameters

   other - another container to use as data source
   ilist - initializer list to use as data source

.SH Return value

   *this

.SH Complexity

   1) Linear in the size of *this and other.
   2) Linear in the size of *this unless the allocators do not compare equal and do not
   propagate, in which case linear in the size of *this and other.
   3) Linear in the size of *this and ilist.

.SH Exceptions

   May throw implementation-defined exceptions.                      \fI(until C++17)\fP
   1,3) May throw implementation-defined exceptions.
   2)
   noexcept specification:
   noexcept(std::allocator_traits<Allocator>::is_always_equal::value \fI(since C++17)\fP

   && std::is_nothrow_move_assignable<Hash>::value

   && std::is_nothrow_move_assignable<Pred>::value)

.SH Notes

   After container move assignment (overload \fB(2)\fP), unless element-wise move assignment
   is forced by incompatible allocators, references, pointers, and iterators (other
   than the end iterator) to other remain valid, but refer to elements that are now in
   *this. The current standard makes this guarantee via the blanket statement in
   [container.requirements.general]/12, and a more direct guarantee is under
   consideration via LWG 2321.

.SH Example

   The following code uses operator= to assign std::unordered_multimap or
   std::initializer_list to another std::unordered_multimap.


// Run this code

 #include <iostream>
 #include <string_view>
 #include <unordered_map>

 void display_sizes(const std::unordered_multimap<int, int> &map1,
                    const std::unordered_multimap<int, int> &map2,
                    const std::unordered_multimap<int, int> &map3,
                    const std::string_view comment = "")
 {
     std::cout << "map1: " << map1.size() << ", "
               << "map2: " << map2.size() << ", "
               << "map3: " << map3.size() << " ("
               << comment << ")\\n";
 }

 int main()
 {
     std::unordered_multimap<int, int> map1 {{3, 1}, {4, 1}, {5, 9},
                                             {6, 1}, {7, 1}, {8, 9}};
     std::unordered_multimap<int, int> map2;
     std::unordered_multimap<int, int> map3;

     display_sizes(map1, map2, map3, "initial sizes");

     // copy assignment copies data from map1 to map2
     map2 = map1;

     display_sizes(map1, map2, map3, "sizes after assignment");

     // move assignment moves data from map1 to map3,
     // modifying both map1 and map3
     map3 = std::move(map1);

     display_sizes(map1, map2, map3, "sizes after move assignment");

     // assignment of an initializer_list, see overload (3)
     map2 = { {1, 1}, {2, 2}, {3, 3} };

     display_sizes(map1, map2, map3, "sizes after initializer_list assignment");
 }

.SH Output:

 map1: 6, map2: 0, map3: 0 (initial sizes)
 map1: 6, map2: 6, map3: 0 (sizes after assignment)
 map1: 0, map2: 6, map3: 6 (sizes after move assignment)
 map1: 0, map2: 3, map3: 6 (sizes after initializer_list assignment)

.SH See also

   constructor   constructs the unordered_multimap
   \fI(C++11)\fP       \fI(public member function)\fP
