.TH std::rbegin,std::crbegin 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::rbegin,std::crbegin \- std::rbegin,std::crbegin

.SH Synopsis
   Defined in header <array>
   Defined in header <deque>
   Defined in header <forward_list>
   Defined in header <iterator>
   Defined in header <list>
   Defined in header <map>
   Defined in header <regex>
   Defined in header <set>
   Defined in header <span>                      (since
                                                 C++20)
   Defined in header <string>
   Defined in header <string_view>               (since
                                                 C++17)
   Defined in header <unordered_map>
   Defined in header <unordered_set>
   Defined in header <vector>
   template< class C >                                  (since
   auto rbegin( C& c ) ->                               C++14)
   decltype(c.rbegin());                                (until
                                                        C++17)
   template< class C >                                  (since
   constexpr auto rbegin( C& c ) ->                     C++17)
   decltype(c.rbegin());
   template< class C >                                          (since
   auto rbegin( const C& c ) ->                                 C++14)
   decltype(c.rbegin());                                        (until
                                                                C++17)
   template< class C >                                          (since
   constexpr auto rbegin( const C& c ) ->                       C++17)
   decltype(c.rbegin());                     \fB(1)\fP
   template< class T, size_t N >                                        (since
   reverse_iterator<T*> rbegin( T                                       C++14)
   (&array)[N] );                                                       (until
                                                 \fB(1)\fP                    C++17)
   template< class T, size_t N >                                        (since
   constexpr reverse_iterator<T*> rbegin( T                             C++17)
   (&array)[N] );                                       \fB(2)\fP
   template< class C >                                                          (since
   auto crbegin( const C& c ) ->                                                C++14)
   decltype(std::rbegin(c));                                                    (until
                                                                \fB(3)\fP             C++17)
   template< class C >                                                          (since
   constexpr auto crbegin( const C& c ) ->                                      C++17)
   decltype(std::rbegin(c));

   Returns an iterator to the reverse-beginning of the given container c or array
   array.

   1) Returns a possibly const-qualified iterator to the reverse-beginning of the
   container c.
   2) Returns std::reverse_iterator<T*> to the reverse-beginning of the array array.
   3) Returns a const-qualified iterator to the reverse-beginning of the container c.

   range-rbegin-rend.svg

.SH Parameters

   c     - a container with a rbegin member function
   array - an array of arbitrary type

.SH Return value

   An iterator to the reverse-beginning of c or array

   Overloads

   Custom overloads of rbegin may be provided for classes that do not expose a suitable
   rbegin() member function, yet can be iterated. The following overload is already
   provided by the standard library:

   rbegin(std::initializer_list) specializes std::rbegin
   \fI(C++14)\fP                       \fI(function)\fP

.SH Example


// Run this code

 #include <iostream>
 #include <vector>
 #include <iterator>

 int main()
 {
     std::vector<int> v = { 3, 1, 4 };
     auto vi = std::rbegin(v);
     std::cout << *vi << '\\n';

     int a[] = { -5, 10, 15 };
     auto ai = std::rbegin(a);
     std::cout << *ai << '\\n';
 }

.SH Output:

 4
 15

.SH See also

   begin
   cbegin  returns an iterator to the beginning of a container or array
   \fI(C++11)\fP \fI(function template)\fP
   \fI(C++14)\fP
   end
   cend    returns an iterator to the end of a container or array
   \fI(C++11)\fP \fI(function template)\fP
   \fI(C++14)\fP
   rend    returns a reverse end iterator for a container or array
   crend   \fI(function template)\fP
   \fI(C++14)\fP
