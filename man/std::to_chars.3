.TH std::to_chars 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::to_chars \- std::to_chars

.SH Synopsis
   Defined in header <charconv>
   std::to_chars_result to_chars(char* first, char* last,             \fB(1)\fP \fI(since C++17)\fP
                                 /*see below*/ value, int base = 10);
   std::to_chars_result to_chars(char*, char*, bool, int = 10) =      \fB(2)\fP \fI(since C++17)\fP
   delete;
   std::to_chars_result to_chars(char* first, char* last, float
   value);

   std::to_chars_result to_chars(char* first, char* last, double      \fB(3)\fP \fI(since C++17)\fP
    value);

   std::to_chars_result to_chars(char* first, char* last, long double
   value);
   std::to_chars_result to_chars(char* first, char* last, float
   value,

                                 std::chars_format fmt);
   std::to_chars_result to_chars(char* first, char* last, double
    value,                                                            \fB(4)\fP \fI(since C++17)\fP
                                 std::chars_format fmt);
   std::to_chars_result to_chars(char* first, char* last, long double
   value,

                                 std::chars_format fmt);
   std::to_chars_result to_chars(char* first, char* last, float
   value,

                                 std::chars_format fmt, int
   precision);
   std::to_chars_result to_chars(char* first, char* last, double
    value,                                                            \fB(5)\fP \fI(since C++17)\fP
                                 std::chars_format fmt, int
   precision);
   std::to_chars_result to_chars(char* first, char* last, long double
   value,

                                 std::chars_format fmt, int
   precision);
   struct to_chars_result {

       char* ptr;                                                     \fB(6)\fP \fI(since C++17)\fP
       std::errc ec;

   };

   Converts value into a character string by successively filling the range [first,
   last), where [first, last) is required to be a valid range.

   1) Integer formatters: value is converted to a string of digits in the given base
   (with no redundant leading zeroes). Digits in the range 10..35 (inclusive) are
   represented as lowercase characters a..z. If value is less than zero, the
   representation starts with a minus sign. The library provides overloads for all
   signed and unsigned integer types and for the type char as the type of the parameter
   value.
   2) Overload for bool is deleted. to_chars rejects argument of type bool because the
   result would be "0"/"1" but not "false"/"true" if it is permitted.
   3) value is converted to a string as if by std::printf in the default ("C") locale.
   The conversion specifier is f or e (resolving in favor of f in case of a tie),
   chosen according to the requirement for a shortest representation: the string
   representation consists of the smallest number of characters such that there is at
   least one digit before the radix point (if present) and parsing the representation
   using the corresponding std::from_chars function recovers value exactly. If there
   are several such representations, one with the smallest difference to value is
   chosen, resolving any remaining ties using rounding according to
   std::round_to_nearest
   4) same as \fB(3)\fP, but the conversion specified for the as-if printf is f if fmt is
   std::chars_format::fixed, e if fmt is std::chars_format::scientific, a (but without
   leading "0x" in the result) if fmt is std::chars_format::hex, and g if fmt is
   chars_format::general.
   5) same as \fB(4)\fP, except the precision is specified by the parameter precision rather
   than by the shortest representation requirement.
   6) The return type (see Return value below). std::to_chars_result has no base
   classes, or members other than ptr, ec and implicitly declared special member
   functions.

.SH Parameters

   first, last - character range to write to
   value       - the value to convert to its string representation
   base        - integer base to use: a value between 2 and 36 (inclusive).
   fmt         - floating-point formatting to use, a bitmask of type std::chars_format
   precision   - floating-point precision to use

.SH Return value

   On success, returns a value of type to_chars_result such that ec equals
   value-initialized std::errc and ptr is the one-past-the-end pointer of the
   characters written. Note that the string is not NUL-terminated.

   On error, returns a value of type to_chars_result holding std::errc::value_too_large
   in ec, a copy of the value last in ptr, and leaves the contents of the range [first,
   last) in unspecified state.

operator==(std::to_chars_result)

   friend bool operator==( const to_chars_result&, const                  \fI(since C++20)\fP
   to_chars_result& ) = default;

   Checks if ptr and ec of both arguments are equal respectively.

   This function is not visible to ordinary unqualified or qualified lookup, and can
   only be found by argument-dependent lookup when std::to_chars_result is an
   associated class of the arguments.

.SH Exceptions

   Throws nothing.

.SH Notes

   Unlike other formatting functions in C++ and C libraries, std::to_chars is
   locale-independent, non-allocating, and non-throwing. Only a small subset of
   formatting policies used by other libraries (such as std::sprintf) is provided. This
   is intended to allow the fastest possible implementation that is useful in common
   high-throughput contexts such as text-based interchange (JSON or XML).

   The guarantee that std::from_chars can recover every floating-point value formatted
   by to_chars exactly is only provided if both functions are from the same
   implementation.

   It is required to explicitly cast a bool value to another integer type if it is
   wanted to format the value as "0"/"1".

.SH Example


// Run this code

 #include <iostream>
 #include <charconv>
 #include <system_error>
 #include <string_view>
 #include <array>

 int main()
 {
     std::array<char, 10> str;

     if(auto [ptr, ec] = std::to_chars(str.data(), str.data() + str.size(), 42);
        ec == std::errc())
          std::cout << std::string_view
            (str.data(), ptr);              // C++20, uses string_view(first, last)
       //   (str.data(), ptr - str.data()); // C++17, uses string_view(ptr, length)
 }

.SH Output:

 42

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to          Behavior as published              Correct behavior
   LWG 2955 C++17      this function was in <utility> and used  moved to <charconv> and
                       std::error_code                          uses std::errc
   LWG 3266 C++17      bool argument was accepted and promoted  rejected by a deleted
                       to int                                   overload
   LWG 3373 C++17      to_chars_result might have additional    additional members are
                       members                                  disallowed

.SH See also

   from_chars converts a character sequence to an integer or floating-point value
   \fI(C++17)\fP    \fI(function)\fP
   to_string  converts an integral or floating point value to string
   \fI(C++11)\fP    \fI(function)\fP
   printf
   fprintf    prints formatted output to stdout, a file stream or a buffer
   sprintf    \fI(function)\fP
   snprintf
   \fI(C++11)\fP
   operator<< inserts formatted data
              \fI(public member function of std::basic_ostream<CharT,Traits>)\fP
