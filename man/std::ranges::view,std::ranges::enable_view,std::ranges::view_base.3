.TH std::ranges::view,std::ranges::enable_view,std::ranges::view_base 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::view,std::ranges::enable_view,std::ranges::view_base \- std::ranges::view,std::ranges::enable_view,std::ranges::view_base

.SH Synopsis
   Defined in header <ranges>
   template<class T>
   concept view = ranges::range<T> && std::semiregular<T> &&                       \fB(1)\fP
   ranges::enable_view<T>;
   template<class T>                                                               \fB(2)\fP
   inline constexpr bool enable_view = std::derived_from<T, view_base>;
   struct view_base { };                                                           \fB(3)\fP

   1) The view concept specifies the requirements of a range type that has constant
   time copy, move, and assignment operations (e.g. a pair of iterators, or a generator
   Range that creates its elements on-demand. Notably, the standard library containers
   are ranges, but not views)
   2) The enable_view variable template is used to indicate that whether a range is a
   view. By default, a type is considered a view if it is publicly and unambiguously
   derived from view_base.
   Users may specialize enable_view to true for cv-unqualified program-defined types
   which model view, and false for types which do not. Such specializations must be
   usable in constant expressions and have type const bool.
   3) Deriving from view_base enables range types to model view.
