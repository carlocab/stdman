.TH std::erase,std::erase_if(std::list) 3 "2022.03.29" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::erase,std::erase_if(std::list) \- std::erase,std::erase_if(std::list)

.SH Synopsis
   Defined in header <list>
   template< class T, class Alloc, class U >

   typename std::list<T,Alloc>::size_type        \fB(1)\fP \fI(since C++20)\fP

   erase(std::list<T,Alloc>& c, const U& value);
   template< class T, class Alloc, class Pred >

   typename std::list<T,Alloc>::size_type        \fB(2)\fP \fI(since C++20)\fP

   erase_if(std::list<T,Alloc>& c, Pred pred);

   1) Erases all elements that compare equal to value from the container. Equivalent to
   return c.remove_if([&](auto& elem) { return elem == value; });
   2) Erases all elements that satisfy the predicate pred from the container.
   Equivalent to return c.remove_if(pred);

.SH Parameters

   c     - container from which to erase
   value - value to be removed
           unary predicate which returns true if the element should be erased.

           The expression pred(v) must be convertible to bool for every argument v of
   pred  - type (possibly const) T, regardless of value category, and must not modify
           v. Thus, a parameter type of T&is not allowed
           , nor is T unless for T a move is equivalent to a copy
           \fI(since C++11)\fP.

.SH Return value

   The number of erased elements.

.SH Complexity

   Linear.

.SH Notes

   Unlike std::list::remove, erase accepts heterogenous types and does not force a
   conversion to the container's value type before invoking the == operator.

.SH Example


// Run this code

 #include <iostream>
 #include <numeric>
 #include <string_view>
 #include <list>

 void print_container(std::string_view comment, const std::list<char>& c)
 {
     std::cout << comment;
     for (auto x : c) {
         std::cout << x << ' ';
     }
     std::cout << '\\n';
 }

 int main()
 {
     std::list<char> cnt(10);
     std::iota(cnt.begin(), cnt.end(), '0');
     print_container("Init:\\n", cnt);

     std::erase(cnt, '3');
     print_container("Erase '3':\\n", cnt);

     auto erased = std::erase_if(cnt, [](char x) { return (x - '0') % 2 == 0; });
     print_container("Erase all even numbers:\\n", cnt);
     std::cout << "In all " << erased << " even numbers were erased.\\n";
 }

.SH Output:

 Init:
 0 1 2 3 4 5 6 7 8 9
 Erase '3':
 0 1 2 4 5 6 7 8 9
 Erase all even numbers:
 1 5 7 9
 In all 5 even numbers were erased.

.SH See also

   remove    removes elements satisfying specific criteria
   remove_if \fI(function template)\fP
   remove    removes elements satisfying specific criteria
   remove_if \fI(public member function)\fP
