.TH std::ranges::cend 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::cend \- std::ranges::cend

.SH Synopsis
   Defined in header <ranges>
   inline namespace /*unspecified*/ {
                                                                   \fI(since C++20)\fP
       inline constexpr /*unspecified*/ cend = /*unspecified*/;    (customization point
                                                                   object)
   }
   Call signature
   template< class T >

       requires /* see below */

   constexpr std::sentinel_for<ranges::iterator_t<T>> auto
   cend(T&& t);

   Returns a sentinel indicating the end of a const-qualified range.

   range-begin-end.svg

   Let CT be

    1. const std::remove_reference_t<T>& if the argument is a lvalue (i.e. T is an
       lvalue reference type),
    2. const T otherwise,

   a call to ranges::cend is expression-equivalent to
   ranges::end(static_cast<CT&&>(t)).

   If ranges::cend(e) is valid for an expression e, where decltype((e)) is T, then CT
   models std::ranges::range, and std::sentinel_for<S, I> is true in all cases, where S
   is decltype(ranges::cend(e)), and I is decltype(ranges::cbegin(e)).

.SH Example


// Run this code

 #include <algorithm>
 #include <iostream>
 #include <ranges>
 #include <vector>

 int main()
 {
     std::vector<int> v = { 3, 1, 4 };
     namespace ranges = std::ranges;
     if (ranges::find(v, 5) != ranges::cend(v)) {
         std::cout << "found a 5 in vector v!\\n";
     }

     int a[] = { 5, 10, 15 };
     if (ranges::find(a, 5) != ranges::cend(a)) {
         std::cout << "found a 5 in array a!\\n";
     }
 }

.SH Output:

 found a 5 in array a!

.SH See also

   ranges::end returns a sentinel indicating the end of a range
   (C++20)     (customization point object)
   end
   cend        returns an iterator to the end of a container or array
   \fI(C++11)\fP     \fI(function template)\fP
   \fI(C++14)\fP
