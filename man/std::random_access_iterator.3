.TH std::random_access_iterator 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::random_access_iterator \- std::random_access_iterator

.SH Synopsis
   Defined in header <iterator>
   template<class I>

     concept random_access_iterator =
       std::bidirectional_iterator<I> &&
       std::derived_from</*ITER_CONCEPT*/<I>,
   std::random_access_iterator_tag> &&
       std::totally_ordered<I> &&
       std::sized_sentinel_for<I, I> &&
       requires(I i, const I j, const std::iter_difference_t<I> n) {      \fI(since C++20)\fP
         { i += n } -> std::same_as<I&>;
         { j +  n } -> std::same_as<I>;
         { n +  j } -> std::same_as<I>;
         { i -= n } -> std::same_as<I&>;
         { j -  n } -> std::same_as<I>;
         {  j[n]  } -> std::same_as<std::iter_reference_t<I>>;

       };

   The concept random_access_iterator refines bidirectional_iterator by adding support
   for constant time advancement with the +=, +, -=, and - operators, constant time
   computation of distance with -, and array notation with subscripting.

.SH See also

   bidirectional_iterator specifies that a forward_iterator is a bidirectional
   (C++20)                iterator, supporting movement backwards
                          (concept)
