.TH std::span 3 "2019.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::span \- std::span

.SH Synopsis
   Defined in header <span>
   template<

       class T,                                     \fI(since C++20)\fP
       std::ptrdiff_t Extent = std::dynamic_extent

   > class span;

   The class template span describes an object that can refer to a contiguous sequence
   of objects with the first element of the sequence at position zero. A span can
   either have a static extent, in which case the number of elements in the sequence is
   known and encoded in the type, or a dynamic extent.

   A typical implementation holds only two members: a pointer to T and a size.

.SH Template parameters

   T      - element type; must be a complete type that is not an abstract class type
            the number of elements in the sequence, or std::dynamic_extent if dynamic;
   Extent - the program is ill-formed if Extent is negative and is not
            std::dynamic_extent

.SH Member types

   Member type            Definition
   element_type           T
   value_type             std::remove_cv_t<T>
   index_type             std::ptrdiff_t
   difference_type        std::ptrdiff_t
   pointer                T*
   reference              T&
                          implementation-defined RandomAccessIterator,
   iterator               ConstexprIterator, and ContiguousIterator whose value_type is
                          value_type
                          implementation-defined constant RandomAccessIterator,
   const_iterator         ConstexprIterator, and ContiguousIterator whose value_type is
                          value_type
   reverse_iterator       std::reverse_iterator<iterator>
   const_reverse_iterator std::reverse_iterator<const_iterator>

   Note: iterator is a mutable iterator if T is not const-qualified.

   All requirements on the iterator types of a Container applies to the iterator and
   const_iterator types of span as well.

   Member constant

   static constexpr std::ptrdiff_t extent = Extent;

.SH Member functions

   constructor   constructs a span
                 \fI(public member function)\fP 
   operator=     assigns a span
                 \fI(public member function)\fP 
.SH Iterators
   begin         returns an iterator to the beginning of the sequence
   cbegin        \fI(public member function)\fP 
   end           returns an iterator to the end of the sequence
   cend          \fI(public member function)\fP 
   rbegin        returns a reverse iterator to the beginning of the sequence
   crbegin       \fI(public member function)\fP 
   rend          returns a reverse iterator to the end of the sequence
   crend         \fI(public member function)\fP 
.SH Element access
   operator[]    accesses an element of the sequence
   operator()    \fI(public member function)\fP 
   data          returns a pointer to the beginning of the sequence of elements
                 \fI(public member function)\fP 
.SH Observers
   size          returns the number of elements in the sequence
                 \fI(public member function)\fP 
   size_bytes    returns the size of the sequence in bytes
                 \fI(public member function)\fP 
   empty         checks if the sequence is empty
                 \fI(public member function)\fP 
         Subviews
   first         obtains a subspan consisting of the first N elements of the sequence
                 \fI(public member function)\fP 
   last          obtains a subspan consisting of the last N elements of the sequence
                 \fI(public member function)\fP 
   subspan       obtains a subspan
                 \fI(public member function)\fP 

.SH Non-member functions

   operator==
   operator!=
   operator<         compares the elements of two spans
   operator<=        \fI(function template)\fP 
   operator>
   operator>=
   as_bytes          converts a span into a view of its underlying bytes
   as_writable_bytes \fI(function template)\fP 

   Non-member constant

   dynamic_extent a constant of type ptrdiff_t
   (C++20)        (constant) 

   Deduction guides
