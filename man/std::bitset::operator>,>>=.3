.TH std::bitset::operator>,>>= 3 "2022.03.29" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::bitset::operator>,>>= \- std::bitset::operator>,>>=

.SH Synopsis
   bitset operator<<( std::size_t pos ) const;          (until
                                                        C++11)
   bitset operator<<( std::size_t pos ) const           (since
   noexcept;                                            C++11)
   bitset& operator<<=( std::size_t pos );                      (until
                                                                C++11)
   bitset& operator<<=( std::size_t pos )                       (since
   noexcept;                                    \fB(1)\fP             C++11)
   bitset operator>>( std::size_t pos ) const;                          (until
                                                    \fB(2)\fP                 C++11)
   bitset operator>>( std::size_t pos ) const                           (since
   noexcept;                                            \fB(3)\fP             C++11)
   bitset& operator>>=( std::size_t pos );                                      (until
                                                                \fB(4)\fP             C++11)
   bitset& operator>>=( std::size_t pos )                                       (since
   noexcept;                                                                    C++11)

   Performs binary shift left and binary shift right. Zeroes are shifted in.

   1-2) Performs binary shift left. The \fB(2)\fP version is destructive, i.e. performs the
   shift to the current object.
   3-4) Performs binary shift right. The \fB(4)\fP version is destructive, i.e. performs the
   shift to the current object.

.SH Parameters

   pos - number of positions to shift the bits

.SH Return value

   1,3) new bitset object containing the shifted bits
   2,4) *this

.SH Example


// Run this code

 #include <iostream>
 #include <bitset>

 int main()
 {
     std::bitset<8> b{0b01110010};
     std::cout << b << " (initial value)\\n";

     for (; b.any(); b >>= 1) {
         for (; !b.test(0); b >>= 1) {
         }
         std::cout << b << '\\n';
     }
 }

.SH Output:

 01110010 (initial value)
 00111001
 00000111
 00000011
 00000001

.SH See also

   rotl       computes the result of bitwise left-rotation
   (C++20)    \fI(function template)\fP
   rotr       computes the result of bitwise right-rotation
   (C++20)    \fI(function template)\fP
   operator&=
   operator|= performs binary AND, OR, XOR and NOT
   operator^= \fI(public member function)\fP
   operator~
