.TH std::ranges::borrowed_iterator_t,std::ranges::borrowed_subrange_t 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::borrowed_iterator_t,std::ranges::borrowed_subrange_t \- std::ranges::borrowed_iterator_t,std::ranges::borrowed_subrange_t

.SH Synopsis
   Defined in header <ranges>
   template<ranges::range R>

   using borrowed_iterator_t =                                        \fB(1)\fP \fI(since C++20)\fP
   std::conditional_t<ranges::borrowed_range<R>,

       ranges::iterator_t<R>, ranges::dangling>;
   template<ranges::range R>

   using borrowed_subrange_t =                                        \fB(2)\fP \fI(since C++20)\fP
   std::conditional_t<ranges::borrowed_range<R>,

       ranges::subrange<ranges::iterator_t<R>>, ranges::dangling>;

   1) Same as ranges::iterator_t when R models borrowed_range, otherwise yields
   ranges::dangling instead.
   2) Similar to \fB(1)\fP, but it yields a specialization of ranges::subrange when the same
   condition is met.

   These two alias templates are used by some constrained algorithms to avoid returning
   potentially dangling iterators or views.

.SH See also

            a placeholder type indicating that an iterator or a subrange should not be
   dangling returned since it would be dangling
            \fI(class)\fP
