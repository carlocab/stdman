.TH std::swap(std::variant) 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::swap(std::variant) \- std::swap(std::variant)

.SH Synopsis
   Defined in header <variant>
   template <class... Types>
   void swap(variant<Types...>& lhs, variant<Types...>& rhs) noexcept(/*  \fI(since C++17)\fP
   see below */);

   Overloads the std::swap algorithm for std::variant. Effectively calls lhs.swap(rhs).

   This overload only participates in overload resolution if
   is_move_constructible_v<T_i> and is_swappable_v<T_i> are both true for all T_i in
   Types...

.SH Parameters

   lhs, rhs - variant objects whose values to swap

.SH Return value

   \fI(none)\fP

.SH Exceptions

   noexcept specification:
   noexcept(noexcept(lhs.swap(rhs)))

.SH Example


// Run this code

 #include <variant>
 #include <string>
 #include <iostream>

 auto print = [](auto const& v, char term = '\\n') {
     std::visit([](auto&& o) { std::cout << o; }, v);
     std::cout << term;
 };

 int main()
 {
     std::variant<int, std::string> v1{123}, v2{"XYZ"};
     print(v1, ' ');
     print(v2);

     std::swap(v1, v2);
     print(v1, ' ');
     print(v2);

     std::variant<double, std::string> v3{3.14};
     // std::swap(v1, v3); // ERROR: ~ inconsistent parameter packs
 }

.SH Output:

 123 XYZ
 XYZ 123

.SH See also

   swap swaps with another variant
        \fI(public member function)\fP

.SH Category:

     * conditionally noexcept
