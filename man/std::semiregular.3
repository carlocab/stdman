.TH std::semiregular 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::semiregular \- std::semiregular

.SH Synopsis
   Defined in header <concepts>
   template <class T>
   concept semiregular = std::copyable<T> &&                              \fI(since C++20)\fP
   std::default_initializable<T>;

   The semiregular concept specifies that a type is both copyable and default
   constructible. It is satisfied by types that behave similarly to built-in types like
   int, except that they need not support comparison with ==.

.SH Example


// Run this code

 #include <concepts>
 #include <iostream>

 template<std::semiregular T>
 struct Single {
     T value;
 };

 int main()
 {
     Single<int> myInt1{4};
     Single<int> myInt2;
     myInt2 = myInt1;
 //  myInt2 == myInt1; // error: no match for 'operator=='

     std::cout << myInt1.value << ' ' << myInt2.value << '\\n';
 }

.SH Output:

 4 4

.SH See also

   regular specifies that a type is regular, that is, it is both semiregular and
   (C++20) equality_comparable
           (concept)
