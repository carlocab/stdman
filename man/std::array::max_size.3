.TH std::array::max_size 3 "2022.03.29" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::array::max_size \- std::array::max_size

.SH Synopsis
   constexpr size_type max_size() const noexcept;  \fI(since C++11)\fP

   Returns the maximum number of elements the container is able to hold due to system
   or library implementation limitations, i.e. std::distance(begin(), end()) for the
   largest container.

.SH Parameters

   \fI(none)\fP

.SH Return value

   Maximum number of elements.

.SH Complexity

   Constant.

.SH Notes

   Because each std::array<T, N> is a fixed-size container, the value returned by
   max_size equals N (which is also the value returned by size)

.SH Example


// Run this code

 #include <iostream>
 #include <array>

 const char* separate(unsigned long long n)
 {
     static char buf[64];

     int i{sizeof(buf) - 1}, j{};
     buf[i] = '\\0';

     do {
         buf[--i] = '0' + (n % 10);
         if (j++ % 3 == 2)
             buf[--i] = '\\'';
     } while (n /= 10);

     return buf + i + (buf[i] == '\\'' ? 1 : 0);
 }

 int main()
 {
     std::array<char, 10> s;
     std::cout << "Maximum size of the 'array' is " << separate(s.max_size()) << "\\n";
 }

.SH Output:

 Maximum size of the 'array' is 10

.SH See also

   size    returns the number of elements
   \fI(C++11)\fP \fI(public member function)\fP
