.TH std::variant_size,std::variant_size_v 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::variant_size,std::variant_size_v \- std::variant_size,std::variant_size_v

.SH Synopsis
   Defined in header <variant>
   template <class T>                                         \fB(1)\fP \fI(since C++17)\fP
   struct variant_size; /* undefined */
   template <class... Types>

   struct variant_size<std::variant<Types...>>                \fB(2)\fP \fI(since C++17)\fP

   : std::integral_constant<std::size_t, sizeof...(Types)> {
   };
   template <class T> class variant_size<const T>;            \fB(3)\fP \fI(since C++17)\fP
   template <class T> class variant_size<volatile T>;         \fB(3)\fP \fI(since C++17)\fP
   template <class T> class variant_size<const volatile T>;       (deprecated in C++20)

   Provides access to the number of alternatives in a possibly cv-qualified variant as
   a compile-time constant expression.

   Formally,

   2) meets the UnaryTypeTrait requirements with a base characteristic of
   std::integral_constant<std::size_t, sizeof...(Types)>
   3) meets the UnaryTypeTrait requirements with a base characteristic of
   std::integral_constant<std::size_t, variant_size<T>>

.SH Member constants

   value    sizeof...(Types)
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator std::size_t converts the object to std::size_t, returns value
                        \fI(public member function)\fP
   operator()           returns value
   \fI(C++14)\fP              \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type std::size_t
   type       std::integral_constant<std::size_t, value>

.SH Notes

   All specializations of std::variant_size satisfy UnaryTypeTrait with base
   characteristic std::integral_constant<std::size_t, N> for some N.

.SH Example


// Run this code

 #include <any>
 #include <cstdio>
 #include <variant>

 static_assert(std::variant_size_v<std::variant<>> == 0);
 static_assert(std::variant_size_v<std::variant<int>> == 1);
 static_assert(std::variant_size_v<std::variant<int, int>> == 2);
 static_assert(std::variant_size_v<std::variant<int, int, int>> == 3);
 static_assert(std::variant_size_v<std::variant<int, float, double>> == 3);
 static_assert(std::variant_size_v<std::variant<std::monostate, void>> == 2);
 static_assert(std::variant_size_v<std::variant<const int, const float>> == 2);
 static_assert(std::variant_size_v<std::variant<std::variant<std::any>>> == 1);

 int main() { std::puts("All static assertions passed."); }

.SH Output:

 All static assertions passed.

.SH See also

   variant_alternative   obtains the type of the alternative specified by its index, at
   variant_alternative_t compile time
   \fI(C++17)\fP               \fI(class template)\fP (alias template)
   tuple_size            obtains the size of tuple at compile time
                         \fI(class template specialization)\fP
