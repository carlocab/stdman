.TH std::ranges::data 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::data \- std::ranges::data

.SH Synopsis
   Defined in header <ranges>
   inline namespace /*unspecified*/ {
                                                                         \fI(since C++20)\fP
       inline constexpr /*unspecified*/ data = /*unspecified*/;          (customization
                                                                         point object)
   }
   Call signature
   template< class T >

       requires /* see below */

   constexpr std::remove_reference_t<ranges::range_reference_t<T>>*
   data(T&& t);

   Returns a pointer to the first element of a contiguous range.

   If the argument is an lvalue or ranges::enable_borrowed_range<std::remove_cv_t<T>>
   is true, a call to ranges::data is expression-equivalent to:

    1. std::forward<T>(t).data(), if that expression is valid, and its return type is a
       pointer to an object type.
    2. Otherwise, std::to_address(ranges::begin(std::forward<T>(t))), if
       ranges::begin(std::forward<T>(t)) is valid and returns a type that models
       std::contiguous_iterator.

       If std::remove_all_extents_t<std::remove_reference_t<T>> is incomplete, then
       ranges::data(std::forward<T>(t)) is ill-formed, no diagnostic required.

   In all other cases, a call to ranges::data is ill-formed, which can result in
   substitution failure when ranges::data(e) appears in the immediate context of a
   template instantiation.

.SH Notes

   If the argument is an rvalue (i.e. T is an object type) and
   ranges::enable_borrowed_range<std::remove_cv_t<T>> is false, the call to
   ranges::data is ill-formed, which also results in substitution failure.

   If ranges::data(e) is valid for an expression e, then it returns a pointer to an
   object.

.SH Example


// Run this code

 #include <cstring>
 #include <iostream>
 #include <ranges>
 #include <string>

 int main()
 {
     std::string s {"Hello world!\\n"};

     char a[20]; // storage for a C-style string
     std::strcpy(a, std::ranges::data(s));
     // [data(s), data(s) + size(s)] is guaranteed to be an NTBS

     std::cout << a;
 }

.SH Output:

 Hello world!

.SH See also

   ranges::cdata obtains a pointer to the beginning of a read-only contiguous range
   (C++20)       (customization point object)
   ranges::begin returns an iterator to the beginning of a range
   (C++20)       (customization point object)
   data          obtains the pointer to the underlying array
   \fI(C++17)\fP       \fI(function template)\fP
