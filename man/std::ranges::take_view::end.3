.TH std::ranges::take_view::end 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::take_view::end \- std::ranges::take_view::end

.SH Synopsis
   constexpr auto end() requires (!__SimpleView<V>);             \fB(1)\fP \fI(since C++20)\fP
   constexpr auto begin() const requires ranges::range<const V>; \fB(2)\fP \fI(since C++20)\fP

   Returns a sentinel or an iterator representing the end of the take_view. The end of
   the take_view is either one past the count-th element in the underlying range, or
   the end of the underlying range if the latter has less than count elements.

   1) Returns a take_view::/*sentinel*/<false>, a std::default_sentinel_t, or a
   ranges::range_iterator_t<V>.
   2) Returns a take_view::/*sentinel*/<true>, a std::default_sentinel_t, or a
   ranges::range_iterator_t<const V>.

   Overload \fB(1)\fP does not participate in overload resolution if V is a simple view (that
   is, if V and const V are views with the same iterator and sentinel types).

.SH Parameters

   \fI(none)\fP

.SH Return value

   The result depends on the concepts satisfied by V (for overload \fB(1)\fP) or const V (for
   overload \fB(2)\fP).

   Let base_ be the underlying view.

    The underlying view satisfies                   random_access_range
                 ...                             yes                       no
                            yes     ranges::begin(base_) + size() std::default_sentinel
       sized_range          no      1) /*sentinel*/<false>{ranges::end(base_)}
                                    2) /*sentinel*/<true>{ranges::end(base_)}

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   begin            returns an iterator to the beginning
                    \fI(public member function)\fP
   counted_iterator iterator adaptor that tracks the distance to the end of the range
   (C++20)          \fI(class template)\fP
   operator==       compares a sentinel with an iterator returned from take_view::begin
                    \fI(function)\fP

.SH Category:

     * Todo no example
