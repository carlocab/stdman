.TH std::ranges::take_view::begin 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::take_view::begin \- std::ranges::take_view::begin

.SH Synopsis
   constexpr auto begin() requires (!__SimpleView<V>);           \fB(1)\fP \fI(since C++20)\fP
   constexpr auto begin() const requires ranges::range<const V>; \fB(2)\fP \fI(since C++20)\fP

   Returns an iterator to the first element of the take_view.

   1) Returns a std::counted_iterator or a ranges::range_iterator_t<V>.
   2) Returns a std::counted_iterator or a ranges::range_iterator_t<const V>.

   Overload \fB(1)\fP does not participate in overload resolution if V is a simple view (that
   is, if V and const V are views with the same iterator and sentinel types).

.SH Parameters

   \fI(none)\fP

.SH Return value

   The result depends on the concepts satisfied by V (for overload \fB(1)\fP) or const V (for
   overload \fB(2)\fP).

   Let base_ be the underlying view, count_ be the number passed to the constructor (0
   if default initialized), sz be the value of size().

     The underlying                          random_access_range
   view satisfies ...         yes                               no
                 yes  ranges::begin(base_) std::counted_iterator{ranges::begin(base_),
    sized_range                            sz}
                  no  std::counted_iterator{ranges::begin(base_), count_}

.SH Example


// Run this code

 #include <ranges>
 #include <iostream>
 #include <string_view>
 using namespace std::literals;

 int main()
 {
     static constexpr auto sv = {"∀x"sv, "∃y"sv, "ε"sv, "δ"sv};

     std::cout << *std::ranges::take_view(sv, 8).begin() << '\\n';
 }

.SH Output:

 ∀x

.SH See also

   end              returns an iterator or a sentinel to the end
                    \fI(public member function)\fP
   counted_iterator iterator adaptor that tracks the distance to the end of the range
   (C++20)          \fI(class template)\fP
   operator==       compares a sentinel with an iterator returned from take_view::begin
                    \fI(function)\fP
