.TH std::lexicographical_compare_three_way 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::lexicographical_compare_three_way \- std::lexicographical_compare_three_way

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt1, class InputIt2, class Cmp >

   constexpr auto lexicographical_compare_three_way( InputIt1 first1,
   InputIt1 last1,
                                                     InputIt2 first2, \fB(1)\fP \fI(since C++20)\fP
   InputIt2 last2,
                                                     Cmp comp)

   -> decltype(comp(*first1, *first2));
   template< class InputIt1, class InputIt2 >

   constexpr auto lexicographical_compare_three_way( InputIt1 first1,
   InputIt1 last1,                                                    \fB(2)\fP \fI(since C++20)\fP

                                                     InputIt2 first2,
   InputIt2 last2);

   Lexicographically compares two ranges [first1, last1) and [first2, last2) using
   three-way comparison and produces a result of the strongest applicable comparison
   category type.

   1) Behaves as if defined as follows:

 for ( ; first1 != last1 && first2 != last2; void(++first1), void(++first2) )
     if (auto cmp = comp(*first1, *first2); cmp != 0)
         return cmp;

 return first1 != last1 ? std::strong_ordering::greater :
        first2 != last2 ? std::strong_ordering::less :
                          std::strong_ordering::equal;

   2) Behaves as if defined as follows:

 return std::lexicographical_compare_three_way(
     first1, last1, first2, last2, std::compare_three_way());

.SH Parameters

   first1, last1 - the first range of elements to examine
   first2, last2 - the second range of elements to examine
                   a function object type. The behavior is undefined if its return type
   comp          - is not one of the three comparison category types (strong_ordering,
                   weak_ordering, or partial_ordering)
.SH Type requirements
   -
   InputIt1, InputIt2 must meet the requirements of LegacyInputIterator.

.SH Return value

   A comparison category type as defined above.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

                           returns true if one range is lexicographically less than
   lexicographical_compare another
                           \fI(function template)\fP
   compare_three_way       function object implementing x <=> y
   (C++20)                 \fI(class)\fP

.SH Category:

     * Todo no example
