.TH std::ranges::cbegin 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::cbegin \- std::ranges::cbegin

.SH Synopsis
   Defined in header <ranges>
   inline namespace /*unspecified*/ {

       inline constexpr /*unspecified*/ cbegin =           \fI(since C++20)\fP
   /*unspecified*/;                                        (customization point object)

   }
   Call signature
   template< class T >

       requires /* see below */

   constexpr std::input_or_output_iterator auto
   cbegin(T&& t);

   Returns an iterator to the first element of the const-qualified argument.

   range-begin-end.svg

   Let CT be

    1. const std::remove_reference_t<T>& if the argument is a lvalue (i.e. T is an
       lvalue reference type),
    2. const T otherwise,

   a call to ranges::begin is expression-equivalent to
   ranges::begin(static_cast<CT&&>(t)).

   The return type models std::input_or_output_iterator in both cases.

.SH Example


// Run this code

 #include <iostream>
 #include <ranges>
 #include <vector>

 int main()
 {
     std::vector<int> v = { 3, 1, 4 };
     auto vi = std::ranges::cbegin(v);
     std::cout << *vi << '\\n';
     // *vi = 42; // Error: read-only variable is not assignable

     int a[] = { -5, 10, 15 };
     auto ai = std::ranges::cbegin(a);
     std::cout << *ai << '\\n';
     // *ai = 42; // Error: read-only variable is not assignable
 }

.SH Output:

 3
 -5

.SH See also

   ranges::begin returns an iterator to the beginning of a range
   (C++20)       (customization point object)
   begin
   cbegin        returns an iterator to the beginning of a container or array
   \fI(C++11)\fP       \fI(function template)\fP
   \fI(C++14)\fP
