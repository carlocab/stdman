.TH std::swap(std::optional) 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::swap(std::optional) \- std::swap(std::optional)

.SH Synopsis
   Defined in header <optional>
   template< class T >
   void swap( optional<T>& lhs, optional<T>& rhs ) noexcept(/* see below  \fI(since C++17)\fP
   */);

   Overloads the std::swap algorithm for std::optional. Exchanges the state of lhs with
   that of rhs. Effectively calls lhs.swap(rhs).

   This function template does not participate in overload resolution unless
   std::is_move_constructible_v<T> and std::is_swappable_v<T> are both true.

.SH Parameters

   lhs, rhs - optional objects whose states to swap

.SH Return value

   \fI(none)\fP

.SH Exceptions

   noexcept specification:
   noexcept(noexcept(lhs.swap(rhs)))

.SH Example


// Run this code

 #include <iostream>
 #include <optional>
 #include <string>

 int main()
 {
     std::optional<std::string> a{"██████"}, b{"▒▒▒▒▒▒"};

     auto print = [&](auto const& s) {
         std::cout
             << s << "\\t"
             << "a = " << a.value_or("(null)") << "  "
             << "b = " << b.value_or("(null)") << '\\n';
     };

     print("Initially:");
     std::swap(a, b);
     print("swap(a, b):");
     a.reset();
     print("\\n""a.reset():");
     std::swap(a, b);
     print("swap(a, b):");
 }

.SH Output:

 Initially:      a = ██████  b = ▒▒▒▒▒▒
 swap(a, b):     a = ▒▒▒▒▒▒  b = ██████

 a.reset():      a = (null)  b = ██████
 swap(a, b):     a = ██████  b = (null)

.SH See also

   swap exchanges the contents
        \fI(public member function)\fP

.SH Category:

     * conditionally noexcept
