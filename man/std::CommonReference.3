.TH std::CommonReference 3 "2019.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::CommonReference \- std::CommonReference

.SH Synopsis
   Defined in header <concepts>
   template < class T, class U >

   concept CommonReference =
     std::Same<std::common_reference_t<T, U>, std::common_reference_t<U,  \fI(since C++20)\fP
   T>> &&
     std::ConvertibleTo<T, std::common_reference_t<T, U>> &&

     std::ConvertibleTo<U, std::common_reference_t<T, U>>;

   The concept CommonReference<T, U> specifies that two types T and U share a common
   reference type (as computed by std::common_reference_t) to which both can be
   converted.

   CommonReference<T, U> is satisfied only if, given expressions t and u such that
   decltype((t)) is T and decltype((u)) is U,

     * std::common_reference_t<T, U>(t) is equal to std::common_reference_t<T, U>(t) if
       and only if t is an equality-preserving expression; and
     * std::common_reference_t<T, U>(u) is equal to std::common_reference_t<T, U>(u) if
       and only if u is an equality-preserving expression.

   In other words, the conversion to the common reference type must not alter the
   equality-preservation property of the original expression.

   Equality preservation

   An expression is equality preserving if it results in equal outputs given equal
   inputs.

     * The inputs to an expression consist of its operands.
     * The outputs of an expression consist of its result and all operands modified by
       the expression (if any).

   Every expression required to be equality preserving is further required to be
   stable: two evaluations of such an expression with the same input objects must have
   equal outputs absent any explicit intervening modification of those input objects.

.SH See also

   common_reference       determines the common reference type of a group of types
   basic_common_reference \fI(class template)\fP 
   (C++20)
   Common                 specifies that two types share a common type
   (C++20)                (concept) 
   common_type            determines the common type of a group of types
   \fI(C++11)\fP                \fI(class template)\fP 
