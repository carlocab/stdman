.TH std::ranges::rbegin 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::rbegin \- std::ranges::rbegin

.SH Synopsis
   Defined in header <ranges>
   inline namespace /*unspecified*/ {

       inline constexpr /*unspecified*/ rbegin =           \fI(since C++20)\fP
   /*unspecified*/;                                        (customization point object)

   }
   Call signature
   template< class T >

       requires /* see below */

   constexpr std::input_or_output_iterator auto
   rbegin(T&& t);

   Returns an iterator to the last element of the argument.

   range-rbegin-rend.svg

   Let t be an object of type T. If the argument is an lvalue or
   ranges::enable_borrowed_range<std::remove_cv_t<T>> is true, then a call to
   ranges::rbegin is expression-equivalent to:

    1. std::forward<T>(t).rbegin(), if that expression is valid, and its return type
       models std::input_or_output_iterator.
    2. Otherwise, rbegin(std::forward<T>(t)), if T is a class or enumeration type, the
       aforementioned unqualified call is valid, its return type models
       std::input_or_output_iterator, where the overload resolution is performed with
       the following candidates:

          * void rbegin(auto&) = delete;
          * void rbegin(const auto&) = delete;
          * any declarations of begin found by argument-dependent lookup.

    3. Otherwise, std::make_reverse_iterator(ranges::end(std::forward<T>)) if both
       ranges::begin(std::forward<T>(t)) and ranges::end(std::forward<T>(t)) are valid
       expressions, have the same type, and that type models
       std::bidirectional_iterator.

   In all other cases, a call to ranges::rbegin is ill-formed, which can result in
   substitution failure when ranges::rbegin(t) appears in the immediate context of a
   template instantiation.

.SH Notes

   If the argument is an rvalue (i.e. T is an object type) and
   ranges::enable_borrowed_range<std::remove_cv_t<T>> is false, the call to
   ranges::rbegin is ill-formed, which also results in substitution failure.

   The return type models std::input_or_output_iterator in all cases.

.SH Example


// Run this code

 #include <iostream>
 #include <vector>
 #include <ranges>

 int main()
 {
     std::vector<int> v = { 3, 1, 4 };
     auto vi = std::ranges::rbegin(v);
     std::cout << *vi << '\\n';
     *vi = 42; // OK

     int a[] = { -5, 10, 15 };
     auto ai = std::ranges::rbegin(a);
     std::cout << *ai << '\\n';
     *ai = 42; // OK
 }

.SH Output:

 4
 15

.SH See also

   ranges::crbegin returns a reverse iterator to a read-only range
   (C++20)         (customization point object)
   rbegin          returns a reverse iterator to a container or array
   crbegin         \fI(function template)\fP
   \fI(C++14)\fP
