.TH std::swap(std::forward_list) 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::swap(std::forward_list) \- std::swap(std::forward_list)

.SH Synopsis
   Defined in header <forward_list>
   template< class T, class Alloc >
                                                                          \fI(since C++11)\fP
   void swap( std::forward_list<T,Alloc>& lhs,                            \fI(until C++17)\fP

              std::forward_list<T,Alloc>& rhs );
   template< class T, class Alloc >

   void swap( std::forward_list<T,Alloc>& lhs,                            \fI(since C++17)\fP

              std::forward_list<T,Alloc>& rhs ) noexcept(/* see below
   */);

   Specializes the std::swap algorithm for std::forward_list. Swaps the contents of lhs
   and rhs. Calls lhs.swap(rhs).

.SH Parameters

   lhs, rhs - containers whose contents to swap

.SH Return value

   \fI(none)\fP

.SH Complexity

   Constant.

.SH Exceptions

   noexcept specification:           \fI(since C++17)\fP
   noexcept(noexcept(lhs.swap(rhs)))

.SH Example


// Run this code

 #include <algorithm>
 #include <iostream>
 #include <forward_list>

 int main()
 {
     std::forward_list<int> alice{1, 2, 3};
     std::forward_list<int> bob{7, 8, 9, 10};

     auto print = [](const int& n) { std::cout << ' ' << n; };

     // Print state before swap
     std::cout << "alice:";
     std::for_each(alice.begin(), alice.end(), print);
     std::cout << "\\n" "bob  :";
     std::for_each(bob.begin(), bob.end(), print);
     std::cout << '\\n';

     std::cout << "-- SWAP\\n";
     std::swap(alice, bob);

     // Print state after swap
     std::cout << "alice:";
     std::for_each(alice.begin(), alice.end(), print);
     std::cout << "\\n" "bob  :";
     std::for_each(bob.begin(), bob.end(), print);
     std::cout << '\\n';
 }

.SH Output:

 alice: 1 2 3
 bob  : 7 8 9 10
 -- SWAP
 alice: 7 8 9 10
 bob  : 1 2 3

.SH See also

   swap swaps the contents
        \fI(public member function)\fP

.SH Category:

     * conditionally noexcept
