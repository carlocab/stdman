.TH std::cmp_equal,cmp_not_equal,cmp_less,cmp_greater,cmp_less_equal,cmp_greater_equal 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::cmp_equal,cmp_not_equal,cmp_less,cmp_greater,cmp_less_equal,cmp_greater_equal \- std::cmp_equal,cmp_not_equal,cmp_less,cmp_greater,cmp_less_equal,cmp_greater_equal

.SH Synopsis
   Defined in header <utility>
   template< class T, class U >                           \fB(1)\fP \fI(since C++20)\fP
   constexpr bool cmp_equal( T t, U u ) noexcept;
   template< class T, class U >                           \fB(2)\fP \fI(since C++20)\fP
   constexpr bool cmp_not_equal( T t, U u ) noexcept;
   template< class T, class U >                           \fB(3)\fP \fI(since C++20)\fP
   constexpr bool cmp_less( T t, U u ) noexcept;
   template< class T, class U >                           \fB(4)\fP \fI(since C++20)\fP
   constexpr bool cmp_greater( T t, U u ) noexcept;
   template< class T, class U >                           \fB(5)\fP \fI(since C++20)\fP
   constexpr bool cmp_less_equal( T t, U u ) noexcept;
   template< class T, class U >                           \fB(6)\fP \fI(since C++20)\fP
   constexpr bool cmp_greater_equal( T t, U u ) noexcept;

   Compare the values of two integers t and u. Unlike builtin comparison operators,
   negative signed integers always compare less than (and not equal to) unsigned
   integers: the comparison is safe against lossy integer conversion.

 -1 > 0u; // true
 std::cmp_greater(-1, 0u); // false

   It is a compile-time error if either T or U is not a signed or unsigned integer type
   (including standard integer type and extended integer type).

.SH Parameters

   t - left-hand argument
   u - right-hand argument

.SH Return value

   1) true if t is equal to u.
   2) true if t is not equal to u.
   3) true if t is less than u.
   4) true if t is greater than u.
   5) true if t is less or equal to u.
   6) true if t is greater or equal to u.

.SH Possible implementation

   template< class T, class U >
   constexpr bool cmp_equal( T t, U u ) noexcept
   {
       using UT = std::make_unsigned_t<T>;
       using UU = std::make_unsigned_t<U>;
       if constexpr (std::is_signed_v<T> == std::is_signed_v<U>)
           return t == u;
       else if constexpr (std::is_signed_v<T>)
           return t < 0 ? false : UT(t) == u;
       else
           return u < 0 ? false : t == UU(u);
   }

   template< class T, class U >
   constexpr bool cmp_not_equal( T t, U u ) noexcept
   {
       return !cmp_equal(t, u);
   }

   template< class T, class U >
   constexpr bool cmp_less( T t, U u ) noexcept
   {
       using UT = std::make_unsigned_t<T>;
       using UU = std::make_unsigned_t<U>;
       if constexpr (std::is_signed_v<T> == std::is_signed_v<U>)
           return t < u;
       else if constexpr (std::is_signed_v<T>)
           return t < 0 ? true : UT(t) < u;
       else
           return u < 0 ? false : t < UU(u);
   }

   template< class T, class U >
   constexpr bool cmp_greater( T t, U u ) noexcept
   {
       return cmp_less(u, t);
   }

   template< class T, class U >
   constexpr bool cmp_less_equal( T t, U u ) noexcept
   {
       return !cmp_greater(t, u);
   }

   template< class T, class U >
   constexpr bool cmp_greater_equal( T t, U u ) noexcept
   {
       return !cmp_less(t, u);
   }

.SH Notes

   These functions cannot be used to compare std::byte, char, char8_t, char16_t,
   char32_t, wchar_t and bool.

.SH Example

    This section is incomplete
    Reason: no example

.SH Category:

     * Todo no example
