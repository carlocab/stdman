.TH std::move_iterator::operator*,-> 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::move_iterator::operator*,-> \- std::move_iterator::operator*,->

.SH Synopsis
   reference operator* () const;                   \fI(until C++17)\fP
   constexpr reference operator* () const;         \fI(since C++17)\fP
   pointer operator->() const;             \fB(1)\fP                   \fI(until C++17)\fP
   constexpr pointer operator->() const;       \fB(2)\fP               \fI(since C++17)\fP
                                                                 (deprecated in C++20)

   Returns a rvalue-reference or pointer to the current element.

   1) Equivalent to static_cast<reference>(*base()).
   2) Equivalent to base().

.SH Parameters

   \fI(none)\fP

.SH Return value

   1) Rvalue-reference to the current element or its copy.
   2) Copy of the underlying iterator. A pointer to the current element is eventually
   returned if -> is directly used.

.SH Notes

   Note that \fB(2)\fP eventually returns a pointer if -> is directly used. When
   dereferencing a pointer the returned value is an lvalue. This may lead to unintended
   behavior.

.SH Example

    This section is incomplete
    Reason: no example

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to             Behavior as published              Correct behavior
                       dereferencing a move_iterator could return a
   LWG 2106 C++11      dangling reference                            returns the object
                       if the dereferencing the underlying iterator  instead
                       returns a prvalue

.SH See also

   operator[] accesses an element by index
              \fI(public member function)\fP

.SH Category:

     * Todo no example
