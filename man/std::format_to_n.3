.TH std::format_to_n 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::format_to_n \- std::format_to_n

.SH Synopsis
   Defined in header <format>
   template<class OutputIt, class... Args>

   std::format_to_n_result<OutputIt>                                  \fB(1)\fP \fI(since C++20)\fP
       format_to_n(OutputIt out, std::iter_difference_t<OutputIt> n,

                   std::string_view fmt, const Args&... args);
   template<class OutputIt, class... Args>

   std::format_to_n_result<OutputIt>                                  \fB(2)\fP \fI(since C++20)\fP
       format_to_n(OutputIt out, std::iter_difference_t<OutputIt> n,

                   std::wstring_view fmt, const Args&... args);
   template<class OutputIt, class... Args>

   std::format_to_n_result<OutputIt>
       format_to_n(OutputIt out, std::iter_difference_t<OutputIt> n,  \fB(3)\fP \fI(since C++20)\fP

                   const std::locale& loc, std::string_view fmt,
   const Args&... args);
   template<class OutputIt, class... Args>

   std::format_to_n_result<OutputIt>
       format_to_n(OutputIt out, std::iter_difference_t<OutputIt> n,  \fB(4)\fP \fI(since C++20)\fP

                   const std::locale& loc, std::wstring_view fmt,
   const Args&... args);
   template<class OutputIt>

   struct format_to_n_result {
       OutputIt out;                                                  \fB(5)\fP \fI(since C++20)\fP
       std::iter_difference_t<OutputIt> size;

   };

   Format args according to the format string fmt, and write the result to the output
   iterator out. At most n characters are written. If present, loc is used for
   locale-specific formatting.

   Let CharT be decltype(fmt)::char_type (char for overloads (1,3), wchar_t for
   overloads (2,4)).

   These overloads only participate in overload resolution if OutputIt satisfies the
   concept std::output_iterator<const CharT&>.

   The behavior is undefined if OutputIt does not model (meet the semantic requirements
   of) the the concept std::output_iterator<const CharT&>, or if std::formatter<Ti,
   CharT> does not meet the Formatter requirements for any Ti in Args.

   5) std::format_to_n_result has no base classes, or members other than out, size and
   implicitly declared special member functions.

.SH Parameters

   out     - iterator to the output buffer
   n       - maximum number of characters to be written to the buffer
             string view representing the format string.

             The format string consists of

               * ordinary characters (except { and }), which are copied unchanged to
                 the output,
               * escape sequences {{ and }}, which are replaced with { and }
                 respectively in the output, and
               * replacement fields.

             Each replacement field has the following format:

               * introductory { character;
               * (optional) arg-id, a non-negative number;
               * (optional) a colon (:) followed by a format specification;
   fmt     -   * final } character.

             arg-id specifies the index of the argument in args whose value is to be
             used for formatting; if arg-id is omitted, the arguments are used in
             order. The arg-ids in a format string must all be present or all be
             omitted. Mixing manual and automatic indexing is an error.

             The format specification is defined by the std::formatter specialization
             for the corresponding argument.

               * For basic types and standard string types, the format specification is
                 interpreted as standard format specification.
               * For chrono types, the format specification is interpreted as chrono
                 format specification.
               * For other formattable types, the format specification is determined by
                 user-defined formatter specializations.
   args... - arguments to be formatted
   loc     - std::locale used for locale-specific formatting

.SH Return value

   A format_to_n_result such that the out member is an iterator past the end of the
   output range, and the size member is the total (not truncated) output size.

.SH Exceptions

   Throws std::format_error if fmt is not a valid format string for the provided
   arguments. Also propagates any exception thrown by formatter or iterator operations.

.SH Example


// Run this code

 #include <format>
 #include <string_view>
 #include <iostream>

 int main()
 {
     char buffer[64];

     const auto result =
         std::format_to_n(buffer, std::size(buffer),
                          "Hubble's H{0} {1} {2} miles/sec/mpc.",
                          "\\u2080", "\\u2245", 42);

     std::cout << "Buffer: \\"" << std::string_view{buffer, result.size} << "\\"\\n"
               << "Buffer size = " << std::size(buffer) << '\\n'
               << "Untruncated output size = " << result.size << '\\n';
 }

.SH Output:

 Buffer: "Hubble's H₀ ≅ 42 miles/sec/mpc."
 Buffer size = 64
 Untruncated output size = 35

.SH See also

   format         stores formatted representation of the arguments in a new string
   (C++20)        \fI(function template)\fP
   format_to      writes out formatted representation of its arguments through an
   (C++20)        output iterator
                  \fI(function template)\fP
   formatted_size determines the number of characters necessary to store the formatted
   (C++20)        representation of its arguments
                  \fI(function template)\fP
