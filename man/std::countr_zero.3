.TH std::countr_zero 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::countr_zero \- std::countr_zero

.SH Synopsis
   Defined in header <bit>
   template<class T>                         \fI(since C++20)\fP
   constexpr int countr_zero(T x) noexcept;

   Returns the number of consecutive 0 bits in the value of x, starting from the least
   significant bit ("right").

   This overload only participates in overload resolution if T is an unsigned integer
   type (that is, unsigned char, unsigned short, unsigned int, unsigned long, unsigned
   long long, or an extended unsigned integer type).

.SH Parameters

   x - values of unsigned integer type

.SH Return value

   The number of consecutive 0 bits in the value of x, starting from the least
   significant bit.

.SH Example


// Run this code

 #include <bit>
 #include <bitset>
 #include <cstdint>
 #include <initializer_list>
 #include <iostream>

 int main()
 {
     for (std::uint8_t i : { 0, 0b11111111, 0b00011100 }) {
         std::cout << "countr_zero(0b" << std::bitset<8>(i) << ") = "
                   << std::countr_zero(i) << '\\n';
     }
 }

.SH Output:

 countr_zero(0b00000000) = 8
 countr_zero(0b11111111) = 0
 countr_zero(0b00011100) = 2

.SH See also

   countl_zero counts the number of consecutive 0 bits, starting from the most
   (C++20)     significant bit
               \fI(function template)\fP
   countl_one  counts the number of consecutive 1 bits, starting from the most
   (C++20)     significant bit
               \fI(function template)\fP
   countr_one  counts the number of consecutive 1 bits, starting from the least
   (C++20)     significant bit
               \fI(function template)\fP
   popcount    counts the number of 1 bits in an unsigned integer
   (C++20)     \fI(function template)\fP
