.TH std::basic_string_view::substr 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string_view::substr \- std::basic_string_view::substr

.SH Synopsis
   constexpr basic_string_view                                    \fI(since C++17)\fP
       substr(size_type pos = 0, size_type count = npos ) const;

   Returns a view of the substring [pos, pos + rcount), where rcount is the smaller of
   count and size() - pos.

.SH Parameters

   pos   - position of the first character
   count - requested length

.SH Return value

   View of the substring [pos, pos + rcount).

.SH Exceptions

   std::out_of_range if pos > size()

.SH Complexity

   Constant.

.SH Example


// Run this code

 #include <cstddef>
 #include <iostream>
 #include <stdexcept>
 #include <string_view>

 int main()
 {
     using namespace std::literals;
     std::size_t count{}, pos{};
     constexpr auto data{"ABCDEF"sv};

     std::cout << data.substr() << '\\n'; // ABCDEF
     std::cout << data.substr(pos = 1) << '\\n'; // BCDEF
     std::cout << data.substr(pos = 2, count = 3) << '\\n'; // CDE

     std::cout << data.substr(pos = 4, count = 42) << '\\n'; // EF
         // count -> 2 == size() - pos == 6 - 4

     try {
         data.substr(pos = 666, count = 1); // throws: pos > size()
     }
     catch(std::out_of_range const& ex) {
         std::cout << ex.what() << '\\n';
     }
 }

.SH Output:

 ABCDEF
 BCDEF
 CDE
 EF
 basic_string_view::substr: __pos (which is 666) > __size (which is 6)

.SH See also

   copy copies characters
        \fI(public member function)\fP
   find find characters in the view
        \fI(public member function)\fP
