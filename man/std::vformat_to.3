.TH std::vformat_to 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vformat_to \- std::vformat_to

.SH Synopsis
   Defined in header <format>
   template<class OutputIt>

   OutputIt vformat_to(OutputIt out,                                            (since
                       std::string_view fmt,                                \fB(1)\fP C++20)

                       std::format_args_t<std::type_identity_t<OutputIt>,
   char> args);
   template<class OutputIt, class... Args>

   OutputIt vformat_to(OutputIt out,                                            (since
                       std::wstring_view fmt,                               \fB(2)\fP C++20)

                       std::format_args_t<std::type_identity_t<OutputIt>,
   wchar_t> args);
   template<class OutputIt, class... Args>

   OutputIt vformat_to(OutputIt out, const std::locale& loc,                    (since
                       std::string_view fmt,                                \fB(3)\fP C++20)

                       std::format_args_t<std::type_identity_t<OutputIt>,
   char> args);
   template<class OutputIt, class... Args>

   OutputIt vformat_to(OutputIt out, const std::locale& loc,                    (since
                       std::wstring_view fmt,                               \fB(4)\fP C++20)

                       std::format_args_t<std::type_identity_t<OutputIt>,
   wchar_t> args);

   Format arguments held by args according to the format string fmt, and write the
   result to the output iterator out. If present, loc is used for locale-specific
   formatting.

   Let CharT be decltype(fmt)::char_type (char for overloads (1,3), wchar_t for
   overloads (2,4)).

   These overloads only participate in overload resolution if OutputIt satisfies the
   concept std::output_iterator<const CharT&>.

   The behavior is undefined if OutputIt does not model (meet the semantic requirements
   of) the the concept std::output_iterator<const CharT&>, or if std::formatter<Ti,
   CharT> does not meet the Formatter requirements for any Ti in the type of arguments.

.SH Parameters

   out  - iterator to the output buffer
          string view representing the format string.

          The format string consists of

            * ordinary characters (except { and }), which are copied unchanged to the
              output,
            * escape sequences {{ and }}, which are replaced with { and } respectively
              in the output, and
            * replacement fields.

          Each replacement field has the following format:

            * introductory { character;
            * (optional) arg-id, a non-negative number;
            * (optional) a colon (:) followed by a format specification;
   fmt  -   * final } character.

          arg-id specifies the index of the argument in args whose value is to be used
          for formatting; if arg-id is omitted, the arguments are used in order. The
          arg-ids in a format string must all be present or all be omitted. Mixing
          manual and automatic indexing is an error.

          The format specification is defined by the std::formatter specialization for
          the corresponding argument.

            * For basic types and standard string types, the format specification is
              interpreted as standard format specification.
            * For chrono types, the format specification is interpreted as chrono
              format specification.
            * For other formattable types, the format specification is determined by
              user-defined formatter specializations.
   args - arguments to be formatted
   loc  - std::locale used for locale-specific formatting

.SH Return value

   iterator past the end of the output range

.SH Exceptions

   Throws std::format_error if fmt is not a valid format string for the provided
   arguments. Also propagates any exception thrown by formatter or iterator operations.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

.SH Category:

     * Todo no example
