.TH std::ranges::views::drop_while,std::ranges::drop_while_view 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::views::drop_while,std::ranges::drop_while_view \- std::ranges::views::drop_while,std::ranges::drop_while_view

.SH Synopsis
   template< ranges::view V, class Pred >

       requires ranges::input_range<V> &&
                std::is_object_v<Pred> &&
                std::indirect_unary_predicate<const Pred,             \fB(1)\fP \fI(since C++20)\fP
   ranges::iterator_t<V>>

   class drop_while_view : public
   ranges::view_interface<drop_while_view<V, Pred>>
   namespace views {

       inline constexpr /*unspecified*/ drop_while = /*unspecified*/; \fB(2)\fP \fI(since C++20)\fP

   }

   1) A range adaptor that represents view of elements from an underlying sequence,
   beginning at the first element for which the predicate returns false.
   2) The expression views::drop_while(E, F) is expression-equivalent to
   drop_while_view{E, F} for any suitable subexpressions E and F.

   drop_while_view models the concepts contiguous_range, random_access_range,
   bidirectional_range, forward_range, input_range, and common_range when the
   underlying view V models respective concepts.

.SH Member functions

   constructor   constructs a drop_while_view
                 \fI(public member function)\fP
   base          returns a copy of the underlying (adapted) view
                 \fI(public member function)\fP
   pred          returns a reference to the stored predicate
                 \fI(public member function)\fP
   begin         returns an iterator to the beginning
                 \fI(public member function)\fP
   end           returns an iterator or a sentinel to the end
                 \fI(public member function)\fP

   Deduction guides

.SH Example


// Run this code

 #include <ranges>
 #include <vector>
 #include <iostream>

 int main()
 {
     std::vector<int> v{0,1,2,3,4,5};
     for(int n : v | std::views::drop_while([](int i){return i<3;})) {
         std::cout << n << ' ';
     }
 }

.SH Output:

 3 4 5
