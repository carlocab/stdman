.TH std::chrono::month::operator++,std::chrono::month::operator-- 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::month::operator++,std::chrono::month::operator-- \- std::chrono::month::operator++,std::chrono::month::operator--

.SH Synopsis
   constexpr std::chrono::month& operator++() noexcept;   \fB(1)\fP \fI(since C++20)\fP
   constexpr std::chrono::month operator++(int) noexcept; \fB(2)\fP \fI(since C++20)\fP
   constexpr std::chrono::month& operator--() noexcept;   \fB(3)\fP \fI(since C++20)\fP
   constexpr std::chrono::month operator--(int) noexcept; \fB(4)\fP \fI(since C++20)\fP

   Adds or subtracts 1 from the month value, reducing the result modulo 12 to an
   integer in the range [1, 12].

   1-2) Performs *this += std::chrono::months{1};
   3-4) Performs *this -= std::chrono::months{1};

.SH Parameters

   \fI(none)\fP

.SH Return value

   1,3) a reference to this month after modification
   2,4) a copy of the month made before modification

.SH Notes

   After a call to one of these functions, ok() is always true.

.SH Example


// Run this code

 #include <iostream>
 #include <chrono>

 int main()
 {

     std::chrono::month m {6};

     ++m;
     if (m == std::chrono::month(7)) {
         std::cout << "Month incremented correctly" << "\\n";
     } else {
         std::cout << "Month not incremented correctly" << "\\n";
     }

     --m;
     if (m == std::chrono::month(6)) {
         std::cout << "Month decremented correctly" << "\\n";
     } else {
         std::cout << "Month not decremented correctly" << "\\n";
     }

 }

.SH Output:

 Month incremented correctly
 Month decremented correctly

.SH See also

   operator+= adds or subtracts a number of months
   operator-= \fI(public member function)\fP
   operator+  performs arithmetic on months
   operator-  \fI(function)\fP
