.TH std::basic_string::at 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::at \- std::basic_string::at

.SH Synopsis
   reference       at( size_type pos );                  \fI(until C++20)\fP
   constexpr reference       at( size_type pos );        \fI(since C++20)\fP
   const_reference at( size_type pos ) const;            \fI(until C++20)\fP
   constexpr const_reference at( size_type pos ) const;  \fI(since C++20)\fP

   Returns a reference to the character at specified location pos. Bounds checking is
   performed, exception of type std::out_of_range will be thrown on invalid access.

.SH Parameters

   pos - position of the character to return

.SH Return value

   Reference to the requested character.

.SH Exceptions

   Throws std::out_of_range if pos >= size().

.SH Complexity

   Constant.

.SH Example


// Run this code

 #include <stdexcept>
 #include <iostream>
 #include <string>

 int main()
 {
     std::string s("message"); // for capacity

     s = "abc";
     s.at(2) = 'x'; // ok
     std::cout << s << '\\n';

     std::cout << "string size = " << s.size() << '\\n';
     std::cout << "string capacity = " << s.capacity() << '\\n';

     try {
         // throw, even if capacity allowed to access element
         s.at(3) = 'x';
     }
     catch (std::out_of_range const& exc) {
         std::cout << exc.what() << '\\n';
     }
 }

.SH Possible output:

 abx
 string size = 3
 string capacity = 7
 basic_string::at

.SH See also

   operator[] accesses the specified character
              \fI(public member function)\fP
