.TH std::ranges::views::take_while,std::ranges::take_while_view 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::views::take_while,std::ranges::take_while_view \- std::ranges::views::take_while,std::ranges::take_while_view

.SH Synopsis
   template< ranges::view V, class Pred >

       requires ranges::input_range<V> &&
                std::is_object_v<Pred> &&
                std::indirect_unary_predicate<const Pred,             \fB(1)\fP \fI(since C++20)\fP
   ranges::iterator_t<V>>

   class take_while_view : public
   ranges::view_interface<take_while_view<V, Pred>>
   namespace views {

       inline constexpr /*unspecified*/ take_while = /*unspecified*/; \fB(2)\fP \fI(since C++20)\fP

   }

   1) A range adaptor that represents view of the first N elements from an underlying
   sequence, ending before the first element for which the predicate returns false.
   2) The expression views::take_while(E, F) is expression-equivalent to
   take_while_view{E, F} for any suitable subexpressions E and F.

   take_while_view models the concepts contiguous_range, random_access_range,
   bidirectional_range, forward_range, and input_range when the underlying view V
   models respective concepts.

.SH Member functions

   constructor   constructs a take_while_view
                 \fI(public member function)\fP
   base          returns a copy of the underlying (adapted) view
                 \fI(public member function)\fP
   pred          returns a reference to the stored predicate
                 \fI(public member function)\fP
   begin         returns an iterator to the beginning
                 \fI(public member function)\fP
   end           returns a sentinel representing the end
                 \fI(public member function)\fP

   Deduction guides

   Nested classes

   sentinel the sentinel type
            \fI(public member class)\fP

.SH Example


// Run this code

 #include <ranges>
 #include <iostream>

 int main()
 {
     for (int year : std::views::iota(2017)
                   | std::views::take_while([](int y) { return y <= 2020; })) {
         std::cout << year << ' ';
     }
     std::cout << '\\n';

     const char idea[] {"Today is yesterday's tomorrow!.."};
     for (char x : std::ranges::take_while_view(idea, [](char c) { return c != '.'; })) {
         std::cout << x;
     }
     std::cout << '\\n';
 }

.SH Output:

 2017 2018 2019 2020
 Today is yesterday's tomorrow!
