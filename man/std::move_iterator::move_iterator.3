.TH std::move_iterator::move_iterator 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::move_iterator::move_iterator \- std::move_iterator::move_iterator

.SH Synopsis
   move_iterator();                           \fI(until C++17)\fP
   constexpr move_iterator();                 \fI(since C++17)\fP
   explicit move_iterator(                                  \fI(until C++17)\fP
   iterator_type x );
   constexpr explicit move_iterator(                        \fI(since C++17)\fP
   iterator_type x );                 \fB(1)\fP
   template< class U >                    \fB(2)\fP
   move_iterator( const                                                   \fI(until C++17)\fP
   move_iterator<U>& other );                 \fB(3)\fP
   template< class U >
   constexpr move_iterator( const                                         \fI(since C++17)\fP
   move_iterator<U>& other );

   Constructs a new iterator adaptor.

   1) Default constructor. The underlying iterator is value-initialized. Operations on
   the resulting iterator have defined behavior if and only if the corresponding
   operations on a value-initialized Iterator also have defined behavior.
   2) The underlying iterator is initialized with
   x
   \fI(until C++20)\fP
   std::move(x)
   \fI(since C++20)\fP.
   3) The underlying iterator is initialized with other.base().
   The behavior is undefined
   \fI(until C++20)\fP
   The program is ill-formed
   \fI(since C++20)\fP if other.base() is not convertible to Iter.

.SH Parameters

   x     - iterator to adapt
   other - iterator adaptor to copy

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   operator= assigns another iterator
             \fI(public member function)\fP

.SH Category:

     * Todo no example
