.TH std::unreachable_sentinel_t,std::unreachable_sentinel 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unreachable_sentinel_t,std::unreachable_sentinel \- std::unreachable_sentinel_t,std::unreachable_sentinel

.SH Synopsis
   Defined in header <iterator>
   struct unreachable_sentinel_t;                                  \fB(1)\fP \fI(since C++20)\fP
   inline constexpr unreachable_sentinel_t unreachable_sentinel{}; \fB(2)\fP \fI(since C++20)\fP

   1) unreachable_sentinel_t is an empty class type that can be used to denote the
   “upper bound” of an unbounded interval.
   2) unreachable_sentinel is a constant of type unreachable_sentinel_t.

.SH Non-member functions

   operator== compares an unreachable_sentinel_t with a value of any
   (C++20)    weakly_incrementable type
              \fI(function template)\fP

operator==(std::unreachable_sentinel_t)

   template<std::weakly_incrementable I>

   friend constexpr bool operator==( unreachable_sentinel_t, const I& )   \fI(since C++20)\fP
   noexcept

   { return false; }

   unreachable_sentinel_t can be compared with any weakly_incrementable type and the
   result is always false.

   This function template is not visible to ordinary unqualified or qualified lookup,
   and can only be found by argument-dependent lookup when std::unreachable_sentinel_t
   is an associated class of the arguments.

.SH Example


// Run this code

 #include <cstddef>
 #include <iterator>
 #include <algorithm>
 #include <iostream>

 template<class CharT>
 std::size_t ntcts_len(const CharT *s)
 {
     return std::ranges::find(s, std::unreachable_sentinel, CharT{}) - s;
 }

 int main()
 {
     std::cout
         << ntcts_len("The quick brown fox jumps over the lazy dog.") << '\\n';
 }

.SH Output:

 44

.SH See also

   iota_view   a view consisting of a sequence generated by repeatedly incrementing an
   views::iota initial value
               \fI(class template)\fP (customization point object)
