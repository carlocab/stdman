.TH std::multiplies 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::multiplies \- std::multiplies

.SH Synopsis
   Defined in header <functional>
   template<>                      \fI(since C++14)\fP
   class multiplies<void>;

   std::multiplies<> is a specialization of std::multiplies with parameter and return
   type deduced.

.SH Member types

   Member type    Definition
   is_transparent /* unspecified */

.SH Member functions

   operator() returns the product of two arguments
              \fI(public member function)\fP

std::multiplies<>::operator()

   template< class T, class U>

   constexpr auto operator()( T&& lhs, U&& rhs ) const

     -> decltype(std::forward<T>(lhs) * std::forward<U>(rhs));

   Returns the result of multiplying lhs by rhs (or whatever operator* is overloaded to
   do)

.SH Parameters

   lhs, rhs - values to multiply

.SH Return value

   The result of lhs * rhs.

.SH Notes

   The member type is_transparent indicates to the caller that this function object is
   a transparent function object: it accepts arguments of arbitrary types and uses
   perfect forwarding, which avoids unnecessary copying and conversion when the
   function object is used in heterogeneous context, or with rvalue arguments. In
   particular, template functions such as std::set::find and std::set::lower_bound make
   use of this member type on their Compare types.

.SH Example


// Run this code

 #include <complex>
 #include <functional>
 #include <iostream>

 int main()
 {
     constexpr std::complex z1{1., 2.}, z2{3., 4.};

     std::cout << std::showpos
               << std::multiplies{}(z1, z2) << ' ' << z1 * z2 << '\\n'
               << std::multiplies{}(z1, 5.) << ' ' << z1 * 5. << '\\n'
               << std::multiplies{}(5., z1) << ' ' << 5. * z1 << '\\n'
               ;
 }

.SH Output:

 (-5,+10) (-5,+10)
 (+5,+10) (+5,+10)
 (+5,+10) (+5,+10)
