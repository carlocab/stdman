.TH std::ranges::views::drop,std::ranges::drop_view 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::views::drop,std::ranges::drop_view \- std::ranges::views::drop,std::ranges::drop_view

.SH Synopsis
   template< ranges::view V >                                    \fB(1)\fP \fI(since C++20)\fP
   class drop_view : public ranges::view_interface<drop_view<V>>
   namespace views {

       inline constexpr /*unspecified*/ drop = /*unspecified*/;  \fB(2)\fP \fI(since C++20)\fP

   }

   1) A range adaptor consisting of elements of the underlying sequence, skipping the
   first N elements.
   2) The expression views::drop(E,F) is expression-equivalent to (where T is
   std::remove_cvref_t<decltype((E))> and D is
   ranges::range_difference_t<decltype((E))>):

     * ((void)F, static_cast<T>(E)), if T is a ranges::empty_view;
     * T{ranges::begin(E) + std::min<D>(ranges::size(E), F)}, ranges::end(E), if T
       models both random_access_range and sized_range, and T is a specialization of

     * std::span where T::extent == std::dynamic_extent,
     * std::basic_string_view,
     * ranges::iota_view, or
     * ranges::subrange;

     * otherwise, drop_view{E, F}.

   In all cases, decltype((F)) must model std::convertible_to<D>.

   drop_view models the concepts contiguous_range, random_access_range,
   bidirectional_range, forward_range, input_range, common_range, and sized_range when
   the underlying view V models respective concepts.

.SH Member functions

   constructor   constructs a drop_view
                 \fI(public member function)\fP
   base          returns a copy of the underlying (adapted) view
                 \fI(public member function)\fP
   begin         returns an iterator to the beginning
                 \fI(public member function)\fP
   end           returns an iterator or a sentinel to the end
                 \fI(public member function)\fP
                 returns the number of elements. Provided only if the underlying
   size          (adapted) range satisfies sized_range
                 \fI(public member function)\fP

   Deduction guides

.SH Example


// Run this code

 #include <ranges>
 #include <vector>
 #include <iostream>

 int main()
 {
     std::vector nums = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

     for (int i : nums | std::views::drop(2))
         std::cout << i << ' ';
     std::cout << '\\n';

     for (int i : std::views::iota(1, 10) | std::views::drop(2))
         std::cout << i << ' ';
     std::cout << '\\n';

     for (int i : std::ranges::drop_view{nums, 2})
         std::cout << i << ' ';
     std::cout << '\\n';
 }

.SH Output:

 3 4 5 6 7 8 9
 3 4 5 6 7 8 9
 3 4 5 6 7 8 9
