.TH std::ranges::ssize 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::ssize \- std::ranges::ssize

.SH Synopsis
   Defined in header <ranges>
   inline namespace /*unspecified*/ {

       inline constexpr /*unspecified*/ ssize =            \fI(since C++20)\fP
   /*unspecified*/;                                        (customization point object)

   }
   Call signature
   template< class T >

       requires /* see below */

   constexpr /*signed-integral-like*/ ssize(T&& t);

   Returns the size of a range converted to a signed type.

   A call to ranges::ssize is expression-equivalent to:

    1. static_cast<std::ptrdiff_t>(ranges::size(std::forward<T>(t))) if
       std::numeric_limits<ranges::range_difference_t<T>>::digits is less than
       std::numeric_limits<std::ptrdiff_t>::digits,
    2. static_cast<ranges::range_difference_t>(ranges::size(std::forward<T>(t)))
       otherwise.

.SH Notes

   If ranges::ssize(e) is valid for an expression e, the return type is a
   signed-integer-like type, i.e. an integer type for which std::is_signed_v is true,
   or a signed-integer-class type.

.SH Example


// Run this code

 #include <array>
 #include <iostream>
 #include <ranges>
 #include <type_traits>

 int main()
 {
     std::array arr{1, 2, 3, 4, 5};
     auto s = std::ranges::ssize(arr);

     std::cout << "ranges::ssize(arr) = " << s << '\\n'
               << "ranges::ssize is "
               << (std::is_signed_v<decltype(s)> ? "signed" : "unsigned")
               << '\\n';

     std::cout << "reversed arr: ";

     for (--s; s >= 0; --s)
         std::cout << arr[s] << ' ';

     std::cout << "\\n" "s = " << s << '\\n';
 }

.SH Output:

 ranges::ssize(arr) = 5
 ranges::ssize is signed
 reversed arr: 5 4 3 2 1
 s = -1

.SH See also

   ranges::size obtains the size of a range whose size can be calculated in constant
   (C++20)      time
                (customization point object)
   size
   ssize        returns the size of a container or array
   \fI(C++17)\fP      \fI(function template)\fP
   (C++20)
