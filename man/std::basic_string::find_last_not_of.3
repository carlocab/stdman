.TH std::basic_string::find_last_not_of 3 "2020.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::find_last_not_of \- std::basic_string::find_last_not_of

.SH Synopsis
   size_type find_last_not_of( const basic_string&          \fI(until C++11)\fP
   str, size_type pos = npos ) const;
   size_type find_last_not_of( const basic_string&          \fI(since C++11)\fP
   str, size_type pos = npos ) const noexcept;
   size_type find_last_not_of( const CharT* s,          \fB(2)\fP
   size_type pos, size_type count ) const;
   size_type find_last_not_of( const CharT* s,          \fB(3)\fP
   size_type pos = npos ) const;                    \fB(1)\fP
   size_type find_last_not_of( CharT ch, size_type                        \fI(until C++11)\fP
   pos = npos ) const;
   size_type find_last_not_of( CharT ch, size_type                        \fI(since C++11)\fP
   pos = npos ) const noexcept;                         \fB(4)\fP
   template < class T >
   size_type find_last_not_of( const T& t,                  \fB(5)\fP           \fI(since C++17)\fP
   size_type pos = npos ) const noexcept(/* see
   below */);

   Finds the last character equal to none of the characters in the given character
   sequence. The search considers only the interval [0, pos]. If the character is not
   present in the interval, npos will be returned.

   1) Finds the last character equal to none of characters in str.
   2) Finds the last character equal to none of characters in the range [s, s+count).
   This range can include null characters.
   3) Finds the last character equal to none of characters in character string pointed
   to by s. The length of the string is determined by the first null character using
   Traits::length(s).
   4) Finds the last character not equal to ch.
   5) Implicitly converts t to a string view sv as if by std::basic_string_view<CharT,
   Traits> sv = t;, then finds the last character equal to none of characters in sv.
   This overload only participates in overload resolution if
   std::is_convertible_v<const T&, std::basic_string_view<CharT, Traits>> is true and
   std::is_convertible_v<const T&, const CharT*> is false.

   In all cases, equality is checked by calling Traits::eq.

.SH Parameters

   str   - string identifying characters to search for
   pos   - position at which to begin searching
   count - length of character string identifying characters to search for
   s     - pointer to a character string identifying characters to search for
   ch    - character identifying characters to search for
   t     - object (convertible to std::basic_string_view) identifying characters to
           search for

.SH Return value

   Position of the found character or npos if no such character is found.

.SH Exceptions

   5)
   noexcept specification:  
   noexcept(std::is_nothrow_convertible_v<const T&, std::basic_string_view<charT,
   traits>>)

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to           Behavior as published              Correct behavior
   LWG 2946 C++17      string_view overload causes ambiguity in  avoided by making it a
                       some cases                                template

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   find              find characters in the string
                     \fI(public member function)\fP 
   rfind             find the last occurrence of a substring
                     \fI(public member function)\fP 
   find_first_of     find first occurrence of characters
                     \fI(public member function)\fP 
   find_first_not_of find first absence of characters
                     \fI(public member function)\fP 
   find_last_of      find last occurrence of characters
                     \fI(public member function)\fP 

.SH Categories:

     * conditionally noexcept
     * Todo no example
