.TH std::literals::string_view_literals::operator""sv 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::literals::string_view_literals::operator""sv \- std::literals::string_view_literals::operator""sv

.SH Synopsis
   Defined in header <string_view>
   constexpr std::string_view                                         \fB(1)\fP \fI(since C++17)\fP
       operator "" sv(const char* str, std::size_t len) noexcept;
   constexpr std::u8string_view                                       \fB(2)\fP \fI(since C++20)\fP
       operator "" sv(const char8_t* str, std::size_t len) noexcept;
   constexpr std::u16string_view                                      \fB(3)\fP \fI(since C++17)\fP
       operator "" sv(const char16_t* str, std::size_t len) noexcept;
   constexpr std::u32string_view                                      \fB(4)\fP \fI(since C++17)\fP
       operator "" sv(const char32_t* str, std::size_t len) noexcept;
   constexpr std::wstring_view                                        \fB(5)\fP \fI(since C++17)\fP
       operator "" sv(const wchar_t* str, std::size_t len) noexcept;

   Forms a string view of a character literal.

   1) returns std::string_view{str, len}
   2) returns std::u8string_view{str, len}
   3) returns std::u16string_view{str, len}
   4) returns std::u32string_view{str, len}
   5) returns std::wstring_view{str, len}

.SH Parameters

   str - pointer to the beginning of the raw character array literal
   len - length of the raw character array literal

.SH Return value

   The string_view literal.

.SH Notes

   These operators are declared in the namespace std::literals::string_view_literals,
   where both literals and string_view_literals are inline namespaces. Access to these
   operators can be gained with using namespace std::literals, using namespace
   std::string_view_literals, and using namespace std::literals::string_view_literals.

.SH Example


// Run this code

 #include <string_view>
 #include <iostream>

 int main()
 {
     using namespace std::literals;

     std::string_view s1 = "abc\\0\\0def";
     std::string_view s2 = "abc\\0\\0def"sv;
     std::cout << "s1: " << s1.size() << " \\"" << s1 << "\\"\\n";
     std::cout << "s2: " << s2.size() << " \\"" << s2 << "\\"\\n";

     std::cout
         << sizeof(decltype( "char A"sv      )::value_type) << ' '
         << sizeof(decltype( L"wchar_t ∀"sv  )::value_type) << ' '
         << sizeof(decltype( u8"char8_t ∆"sv )::value_type) << ' '
         << sizeof(decltype( u"char16_t ∇"sv )::value_type) << ' '
         << sizeof(decltype( U"char32_t ∃"sv )::value_type) << ' '
         << sizeof(decltype( LR"(raw ⊞)"sv   )::value_type) << ' '
         << '\\n';
 }

.SH Possible output:

 s1: 3 "abc"
 s2: 8 "abc^@^@def"
 1 4 1 2 4 4

.SH See also

   constructor   constructs a basic_string_view
                 \fI(public member function)\fP
