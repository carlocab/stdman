.TH std::lower_bound 3 "2021.11.17" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::lower_bound \- std::lower_bound

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt, class T >
   ForwardIt lower_bound( ForwardIt first,                  \fI(until C++20)\fP
   ForwardIt last, const T& value );
   template< class ForwardIt, class T >
   constexpr ForwardIt lower_bound( ForwardIt               \fI(since C++20)\fP
   first, ForwardIt last, const T& value );
   template< class ForwardIt, class T, class
   Compare >                                        \fB(1)\fP                   \fI(until C++20)\fP
   ForwardIt lower_bound( ForwardIt first,
   ForwardIt last, const T& value, Compare comp );
   template< class ForwardIt, class T, class            \fB(2)\fP
   Compare >
   constexpr ForwardIt lower_bound( ForwardIt                             \fI(since C++20)\fP
   first, ForwardIt last, const T& value, Compare
   comp );

   Returns an iterator pointing to the first element in the range [first, last) that is
   not less than (i.e. greater or equal to) value, or last if no such element is found.

   The range [first, last) must be partitioned with respect to the expression element <
   value or comp(element, value), i.e., all elements for which the expression is true
   must precede all elements for which the expression is false. A fully-sorted range
   meets this criterion.

   The first version uses operator< to compare the elements, the second version uses
   the given comparison function comp.

.SH Parameters

   first, last  -  iterators defining the partially-ordered range to examine
   value        -  value to compare the elements to
                   binary predicate which returns true if the first argument is less
                   than (i.e. is ordered before) the second.

                   The signature of the predicate function should be equivalent to the
                   following:

                    bool pred(const Type1 &a, const Type2 &b);

   comp         -  While the signature does not need to have const &, the function must
                   not modify the objects passed to it and must be able to accept all
                   values of type (possibly const) Type1 and Type2 regardless of value
                   category (thus, Type1 & is not allowed
                   , nor is Type1 unless for Type1 a move is equivalent to a copy
                   \fI(since C++11)\fP).
                   The type Type1 must be such that an object of type ForwardIt can be
                   dereferenced and then implicitly converted to Type1. The type Type2
                   must be such that an object of type T can be implicitly converted to
                   Type2.
.SH Type requirements
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.
   -
   Compare must meet the requirements of BinaryPredicate. it is not required to satisfy
   Compare

.SH Return value

   Iterator pointing to the first element that is not less than value, or last if no
   such element is found.

.SH Complexity

   The number of comparisons performed is logarithmic in the distance between first and
   last (At most log
   2(last - first) + O(1) comparisons). However, for non-LegacyRandomAccessIterators,
   the number of iterator increments is linear.

.SH Possible implementation

   See also the implementations in libstdc++ and libc++.

.SH First version
   template<class ForwardIt, class T>
   ForwardIt lower_bound(ForwardIt first, ForwardIt last, const T& value)
   {
       ForwardIt it;
       typename std::iterator_traits<ForwardIt>::difference_type count, step;
       count = std::distance(first, last);

       while (count > 0) {
           it = first;
           step = count / 2;
           std::advance(it, step);
           if (*it < value) {
               first = ++it;
               count -= step + 1;
           }
           else
               count = step;
       }
       return first;
   }
.SH Second version
   template<class ForwardIt, class T, class Compare>
   ForwardIt lower_bound(ForwardIt first, ForwardIt last, const T& value, Compare comp)
   {
       ForwardIt it;
       typename std::iterator_traits<ForwardIt>::difference_type count, step;
       count = std::distance(first, last);

       while (count > 0) {
           it = first;
           step = count / 2;
           std::advance(it, step);
           if (comp(*it, value)) {
               first = ++it;
               count -= step + 1;
           }
           else
               count = step;
       }
       return first;
   }

.SH Example


// Run this code

 #include <algorithm>
 #include <iostream>
 #include <vector>

 int main()
 {
     std::vector<int> data = { 1, 2, 4, 5, 5, 6 };

     for (int i = 0; i < 8; ++i) {
         // Search for first element that is not less than i
         auto lower = std::lower_bound(data.begin(), data.end(), i);

         std::cout << i << " <= ";
         if (lower != data.end())
             std::cout << *lower << " at index " << std::distance(data.begin(), lower);
         else
             std::cout << "not found";
         std::cout << '\\n';
     }
 }

.SH Output:

 0 <= 1 at index 0
 1 <= 1 at index 0
 2 <= 2 at index 1
 3 <= 4 at index 2
 4 <= 4 at index 2
 5 <= 5 at index 3
 6 <= 6 at index 5
 7 <= not found

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to    Behavior as published               Correct behavior
   LWG 270 C++98      Compare was required to be a only a partitioning is needed;
                      strict weak ordering         heterogeneous comparisons permitted

.SH See also

   equal_range     returns range of elements matching a specific key
                   \fI(function template)\fP
   partition       divides a range of elements into two groups
                   \fI(function template)\fP
   partition_point locates the partition point of a partitioned range
   \fI(C++11)\fP         \fI(function template)\fP
                   returns an iterator to the first element greater than a certain
   upper_bound     value
                   \fI(function template)\fP
